<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>幻影</title>
  <subtitle>苟利国家生死以 岂因祸福避趋之</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.520zhang.com/"/>
  <updated>2017-09-11T15:50:34.000Z</updated>
  <id>http://www.520zhang.com/</id>
  
  <author>
    <name>zychen.zyc</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>接口签名进行key排序,并MD5加密</title>
    <link href="http://www.520zhang.com/2017/09/11/%E6%8E%A5%E5%8F%A3%E7%AD%BE%E5%90%8D%E8%BF%9B%E8%A1%8Ckey%E6%8E%92%E5%BA%8F-%E5%B9%B6MD5%E5%8A%A0%E5%AF%86/"/>
    <id>http://www.520zhang.com/2017/09/11/接口签名进行key排序-并MD5加密/</id>
    <published>2017-09-11T15:08:13.000Z</published>
    <updated>2017-09-11T15:50:34.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> leetcode.tokenSort;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.commons.codec.digest.DigestUtils;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"><span class="keyword">import</span> java.util.TreeMap;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * @Author: 章源辰</div><div class="line"> * @Date: 2017/9/11</div><div class="line"> * @Description:</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> class MD5Utils &#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> getDigest(TreeMap&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; <span class="built_in">map</span>, <span class="keyword">String</span> <span class="built_in">key</span>, <span class="keyword">String</span> charset)&#123;</div><div class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">        <span class="keyword">for</span> (Map.Entry entry : <span class="built_in">map</span>.entrySet()) &#123;</div><div class="line">            sb = sb.<span class="built_in">append</span>(entry.getKey()).<span class="built_in">append</span>(<span class="string">"="</span>).<span class="built_in">append</span>(entry.getValue()).<span class="built_in">append</span>(<span class="string">"&amp;"</span>);</div><div class="line">        &#125;</div><div class="line">        sb.<span class="built_in">append</span>(<span class="string">"key"</span>).<span class="built_in">append</span>(<span class="string">"="</span>).<span class="built_in">append</span>(<span class="built_in">key</span>);</div><div class="line">        System.out.<span class="built_in">println</span>(<span class="string">"拼接后的字符："</span>+sb.toString());</div><div class="line">        <span class="keyword">String</span> sign = DigestUtils.md5Hex(getContentBytes(sb.toString(), charset));</div><div class="line">        System.out.<span class="built_in">println</span>(<span class="string">"加密后的签名："</span>+sign);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">byte</span>[] getContentBytes(<span class="keyword">String</span> content, <span class="keyword">String</span> charset) &#123;</div><div class="line">        <span class="keyword">if</span> (charset == <span class="keyword">null</span> || <span class="string">""</span>.equals(charset)) &#123;</div><div class="line">            <span class="keyword">return</span> content.getBytes();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">return</span> content.getBytes(charset);</div><div class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"MD5签名过程中出现错误,指定的编码集不对,您目前指定的编码集是:"</span> + charset);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</div><div class="line">        <span class="comment">//treeMap默认是key升序排序 ,如果需要降序,可以使用Comparator中的compare方法</span></div><div class="line">        TreeMap&lt;<span class="keyword">String</span>,<span class="keyword">String</span>&gt; <span class="built_in">map</span> = <span class="keyword">new</span> TreeMap&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt;();</div><div class="line">        <span class="built_in">map</span>.put(<span class="string">"name"</span>, <span class="string">"zychen"</span>);</div><div class="line">        <span class="built_in">map</span>.put(<span class="string">"password"</span>, <span class="string">"123456"</span>);</div><div class="line">        <span class="built_in">map</span>.put(<span class="string">"project"</span>, <span class="string">"base"</span>);</div><div class="line">        <span class="built_in">map</span>.put(<span class="string">"tenantId"</span>, <span class="string">"192319387131"</span>);</div><div class="line">        getDigest(<span class="built_in">map</span>, <span class="string">"helloWorld"</span>,<span class="string">"utf-8"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>简单叙说jwt加密原理以及这样加密方式的优缺点？</p>
<p>原理：JWT由三部分组成：header.payload.signature，每部分是一个Json表示。最终的Token对这三部分进行编码之后的字符串，中间用“.”分割。header用来描述token的类型（jwt）以及使用的hash算法，payload包含一些摘要信息，signature签名由前面的Header、Payload以及秘钥组成。当访问登录页的时候，登录服务验证之后，签发证书返回给客户端。客户端保存证书，并在每次请求时将其附在request header中。服务器接收请求之后，通过签名和时戳，验证Token的有效性。若有效，则响应客户端。</p>
<p>优点：无状态，不需要在 session中存储用户信息，不用担心跨域问题，只需在用户验证成功后，获取一个JWT token，服务端验证签名即可，比 cookie 更支持原生移动端应用，验证解耦，无需使用特定的身份验证方案，token可以在任何地方生成<br>缺点：<br>1.请求地址中的token容易被盗取，难以保证token本身的安全<br>2.HTTP 头中自定义属性但是局限性太大，XMLHttpRequest 请求通常用于Ajax方法中对于页面局部的异步刷新，通过该类请求得到的页面不能被浏览器所记录下，从而进行前进，后退，刷新，收藏等操作，给用户带来不便</p>
<p>摘要认证：<br>采用对参数和响应进行摘要的方法，每次请求和响应，按照一定的规则生成数字摘要，客户端和服务端双方需要约定好参数的排序方式，请求的参数经过排序后，再将参数名名称和值经过一定的策略组织起来，加上一个秘钥secret，就是‘盐’通过约定的摘要算法生成数字摘要，传递给服务端。服务端在接收到客户端传递的参数后，服务端会采取和客户端相同的策略对参数进行排序，并且加上相同的secret，采用相同的摘要算法生成摘要串，由于相同内容经过相同的摘要算法，生成的摘要内容必定相同。将服务端生成的摘要串与客户端生成的摘要串进行比较，这样就能知道参数内容是否被篡改。</p>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight processing&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>深入理解Java虚拟机笔记</title>
    <link href="http://www.520zhang.com/2017/08/10/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%AC%94%E8%AE%B0/"/>
    <id>http://www.520zhang.com/2017/08/10/深入理解Java虚拟机笔记/</id>
    <published>2017-08-10T14:19:06.000Z</published>
    <updated>2017-08-10T14:49:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>###第二章</p>
<p>####程序计数器<br>1.为了线程切换后能够恢复到正确的执行位置，每一个线程都有一个独立的程序计数器，各个线程之间互不影响<br>2.如果线程正在执行的是一个Java方法，则程序计数器记录的是正在执行的虚拟机字节码指令的地址，如果正在执行的是Native方法，这个计数器值为空</p>
<p>####Java虚拟机栈<br>1.Java虚拟机栈也是线程私有的，生命周期与线程相同<br>2.每个方法在执行时都会创建一个栈帧用于存储：<code>局部变量表</code>、<code>操作数栈</code>、<code>动态链接</code>、<code>方法出口</code>等信息<br>3.我们一般指的“堆栈”里面的栈就是指的虚拟机栈（或者说是局部变量表部分）<br>4.局部变量表部分存放：基本数据类型（boolean、byte、char、short、int、float、long、double）、对象引用类型（指向对象起始地址的引用地址、或者一个指向对象的句柄或其他与此对象相关的位置和returnAddress类型）<br>5.64位长度的long和double类型的数据会占用2个局部变量空间（Slot），其余的数据类型只占1个，内存空间在编译期间完成分配<br>6.进入一个方法是，帧中分配多大的<code>局部变量空间</code>是完全确定的，在方法运行期间不会改变大小</p>
<p>####Java堆<br>1.此内存区域的唯一目的就是存放<code>对象实例</code><br>2.垃圾收集器管理的主要区域，又被称为“GC堆”<br>3.从内存回收角度看，由于现在的收集器基本都采用分代收集算法，所以Java堆又细分为：新生代和老年代；再细致点有Eden空间、From Suvivor空间、To Survivor空间</p>
<p>####方法区</p>
<ol>
<li>与Java堆一样，是各个线程共享的内存区域</li>
<li>存储已被虚拟机加载的<code>类信息</code>、<code>常量</code>、<code>静态变量</code>、<code>即时编译器编译后的代码</code>等数据</li>
</ol>
<h4 id="OutOfMemoryError的情况"><a href="#OutOfMemoryError的情况" class="headerlink" title="OutOfMemoryError的情况"></a>OutOfMemoryError的情况</h4><p>1.虚拟机栈中，如果虚拟机可以动态扩展，如果扩展是无法申请到足够的内存，就会抛出<code>OutOfMemoryError</code>异常<br>2.本地方法栈也会抛出<code>OutOfMemoryError</code>异常<br>3.堆中没有内存完成实例分配，并且堆也无法再扩展时</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;###第二章&lt;/p&gt;
&lt;p&gt;####程序计数器&lt;br&gt;1.为了线程切换后能够恢复到正确的执行位置，每一个线程都有一个独立的程序计数器，各个线程之间互不影响&lt;br&gt;2.如果线程正在执行的是一个Java方法，则程序计数器记录的是正在执行的虚拟机字节码指令的地址，如果正在执行的是
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>常见面试题记录</title>
    <link href="http://www.520zhang.com/2017/08/08/%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <id>http://www.520zhang.com/2017/08/08/常见面试题记录/</id>
    <published>2017-08-08T14:45:21.000Z</published>
    <updated>2017-09-13T15:34:54.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><ol>
<li><code>使用对ID取模的方法做数据库的水平拆分，如果需要增加一个数据库，需要怎么处理？</code><br>这个可以用consistent hash（一致性hash）,具体算法原理Google</li>
<li><code>Java现有的数据结构实现一个LRU缓存？</code><br>使用LinkedHashMap集合，基于里面的一个removeEldestEntry方法，具体见我的另一遍博客</li>
<li><code>实现一个基于内存的ip黑/白名单具体实现？</code><br>使用布隆过滤器</li>
<li><code>一个主线程下有多个子线程任务，主线程必须在100秒内将子线程执行的集合结果进行处理返回？</code><br>这个可以使用线程池的辅助类CountDownLatch，在wait的时候设置等待时间</li>
<li><code>1G日志文件解析？</code><br>awk命令？</li>
<li><code>分布式系统，两个系统之间，数据交互的方式有哪些？哪种比较好？安全？</code></li>
<li><code>一个不知道多少层级的文件夹，文件夹下面有txt文件以及子文件夹，给定一个目录如何求出所有文件中出现频率最多的前10个单词</code></li>
<li><code>spring IOC的原理，实现步骤，如何自己设计一套？</code></li>
<li><p><code>注解的实现，元注解有哪些？</code><br>@Target:说明了Annotation所修饰的对象范围<br>@Inherited：元注解是一个标记注解，@Inherited阐述了某个被标注的类型是被继承的。如果一个使用了@Inherited修饰的annotation类型被用于一个class，则这个annotation将被用于该class的子类。<br>@Retention  </p>
<blockquote>
<p>1.SOURCE:在源文件中有效（即源文件保留）<br>2.CLASS:在class文件中有效（即class保留）<br>3.RUNTIME:在运行时有效（即运行时保留</p>
</blockquote>
</li>
<li><p><code>你是如何获取方法中的方法参数名字的？</code></p>
<figure class="highlight oxygene"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">package org.springframework.core;</div><div class="line"><span class="comment">//获取方法的参数名列表</span></div><div class="line">ParameterNameDiscoverer paramNameDiscover = <span class="keyword">new</span> LocalVariableTableParameterNameDiscoverer();</div><div class="line">String[] paramNames = paramNameDiscover.getParameterNames(<span class="function"><span class="keyword">method</span>);</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>—颗21个节点10层的2义树，第7层最多有多少个结点？简单写出分析过程。</code></p>
</li>
<li><code>在应用服务器上运行APP时’如果出现了 ClassCastException，可能引发该问题的原因有哪些，如何来判断和解决问题呢？</code></li>
<li><code>有一个程序能够接收很多网络请求，同时把这些网络请求中携带的信息记录下来。如果是记录至文件，那么瓶径可能是哪些，如何设计来提高性能， 其中的关键点是？相应的解决方案又有哪些副作用呢？</code></li>
<li><code>任意选择一个你熟悉的JAVA框架（如Spring，IBatis，Struts等都可以) 讲述其中你觉得设计优秀的地方，井简要地说明原因</code></li>
<li><code>写一个转账（从账户A到账户B的转账一笔资金）的伪代码，需要考虑事务。如何解决死锁的问题？如何解决热点账户的问题？</code></li>
<li><code>什么情况下，会出现ConcurrentModificationException这个异常,如何避免</code></li>
<li><code>有一个程序能够接收很多网络请求，同时把这些网络请求中携带的信息记录下来，如果是记录至数据库，那么瓶径可能是哪些，如何设计数据库，来提高性能，其中的关键点是？相应的解决方案又有哪些副作用呢？</code></li>
<li><code>请用图来简单描述任何一个J2EE或者WEB服务器的类加载机制。</code></li>
<li><code>写一个转账（从账户A到账户B的转账一笔资金）的伪代码，需要考虑事务。如何解决死锁的问题？如何解决热点账户的问题？</code></li>
<li><p><code>判断如下代码片段在具体的业务场景下都有哪些潜在问题</code></p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> *  &lt;pre&gt;</div><div class="line"> *  金额分的转化 例如10000 会转化为 100.00</div><div class="line"> *  &lt;code&gt;</div><div class="line"> *  CentAmountFieldValueConverter.convert("10000") = 100.00</div><div class="line"> *  &lt;/code&gt;</div><div class="line"> * &lt;/pre&gt;</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CentAmountFieldValueConverter</span> <span class="title">implements</span> <span class="title">FieldValueConverter</span> &#123;</div><div class="line">    <span class="comment">/** </span></div><div class="line">     * @see com.alipay.finance.filefactory.core.parse.configparse.converter.FieldValueConverter#convert(com.alipay.finance.filefactory.core.parse.model.Field)</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">convert</span>(<span class="params">Field field</span>) </span>&#123;</div><div class="line">        String <span class="keyword">value</span> = (String) field.getDestValue();</div><div class="line">        <span class="keyword">if</span> (StringUtils.isBlank(<span class="keyword">value</span>)) &#123;</div><div class="line">            <span class="keyword">return</span>;        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">long</span> cent = Long.parseLong(<span class="keyword">value</span>);</div><div class="line">            Money amount = <span class="keyword">new</span> Money(cent);</div><div class="line">            amount.setCent(cent);</div><div class="line">            field.setDestValue(amount.toString());</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            field.setDestValue(<span class="keyword">value</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><code>实现一个单例类</code></p>
</li>
<li><code>实现一段小用户登录验证小逻辑</code><br>1）需要考虑登录安全与用户信息安全<br>2）用户信息是维护在文件中<br>3）若需要支持10000+同时在线登录，依然将用户信息维护在文件中，如何实现</li>
<li><code>实现一个集群模式下系统生成唯一流水号的算法，要求(1)流水号不能重复、(2)不能生成一次访问一次数据库</code></li>
</ol>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><ol>
<li><code>Junit或者testng有哪些高级用法？</code></li>
<li><code>如何测一个登录功能？</code></li>
<li><code>Junit的原理，执行过程，是否看过源码？</code></li>
<li><code>selenium如果运行过程中新打开一个页面需要注意什么？</code></li>
<li><code>awk命令的$代表什么意思，如何打印出某行某列</code></li>
<li><code>如何处理测试过程中的数据？比如说每次的post接口都会往数据库插入数据，如何在测试运行后处理数据？</code></li>
<li><code>如何设计一套类似于postman的接口测试网站，说出你的思路？</code></li>
<li><code>selenium的显示等待和隐式等待的区别？</code></li>
<li><code>如何设计一套测试平台，可以持续集成</code></li>
<li><code>针对于dubbo服务如何测试</code></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Java&quot;&gt;&lt;a href=&quot;#Java&quot; class=&quot;headerlink&quot; title=&quot;Java&quot;&gt;&lt;/a&gt;Java&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;code&gt;使用对ID取模的方法做数据库的水平拆分，如果需要增加一个数据库，需要怎么处理？&lt;/code&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="面试" scheme="http://www.520zhang.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Linux命令记录</title>
    <link href="http://www.520zhang.com/2017/07/04/linux%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/"/>
    <id>http://www.520zhang.com/2017/07/04/linux命令记录/</id>
    <published>2017-07-04T15:05:26.000Z</published>
    <updated>2017-09-07T12:17:30.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="echo-命令"><a href="#echo-命令" class="headerlink" title="echo 命令"></a>echo 命令</h3><ul>
<li><h4 id="echo-e-处理特殊字符"><a href="#echo-e-处理特殊字符" class="headerlink" title="echo -e 处理特殊字符"></a>echo -e 处理特殊字符</h4><p>\a 发出警告声；<br>\b 删除前一个字符；<br>\c 最后不加上换行符号；<br>\f 换行但光标仍旧停留在原来的位置；<br>\n 换行且光标移至行首；<br>\r 光标移至行首，但不换行；<br>\t 插入tab；<br>\v 与\f相同；<br>\ 插入\字符；</p>
<h5 id="i-e"><a href="#i-e" class="headerlink" title="i.e"></a>i.e</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"> ~ <span class="built_in">echo</span> -e <span class="string">"z\bychen"</span></div><div class="line">ychen</div><div class="line"> ~ <span class="built_in">echo</span> -e <span class="string">"z\nychen"</span></div><div class="line">z</div><div class="line">ychen</div></pre></td></tr></table></figure>
</li>
<li><h4 id="echo-n-不换行输出"><a href="#echo-n-不换行输出" class="headerlink" title="echo -n 不换行输出"></a>echo -n 不换行输出</h4><h5 id="i-e-1"><a href="#i-e-1" class="headerlink" title="i.e"></a>i.e</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"> ~ <span class="built_in">echo</span> -n <span class="string">"zyc"</span> ; <span class="built_in">echo</span> <span class="string">"hen"</span></div><div class="line">zychen</div><div class="line"> ~ <span class="built_in">echo</span>  <span class="string">"zyc"</span> ; <span class="built_in">echo</span> <span class="string">"hen"</span></div><div class="line">zyc</div><div class="line">hen</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="shell传参数"><a href="#shell传参数" class="headerlink" title="shell传参数"></a>shell传参数</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"><span class="comment"># 是传给脚本的参数个数</span></span></div><div class="line"><span class="meta">$</span><span class="bash">0 是脚本本身的名字</span></div><div class="line"><span class="meta">$</span><span class="bash">1 是传递给该shell脚本的第一个参数</span></div><div class="line"><span class="meta">$</span><span class="bash">2 是传递给该shell脚本的第二个参数</span></div><div class="line"><span class="meta">$</span><span class="bash">@ 是传给脚本的所有参数的列表</span></div><div class="line"><span class="meta">$</span><span class="bash">* 是以一个单字符串显示所有向脚本传递的参数，与位置变量不同，参数可超过9个</span></div><div class="line"><span class="meta">$</span><span class="bash">$ 是脚本运行的当前进程ID号</span></div><div class="line"><span class="meta">$</span><span class="bash">? 是显示最后命令的退出状态，0表示没有错误，其他表示有错误</span></div></pre></td></tr></table></figure>
<h3 id="awk的应用"><a href="#awk的应用" class="headerlink" title="awk的应用"></a>awk的应用</h3><ul>
<li>awk的内置变量<br>NR:代表的是行记录数<br>NF:代表的是每列记录数<br>FS:分隔符,等价于-F,默认是空格，如果想是用冒号分隔   <code>awk -F : &#39;print $1&#39; marks.txt</code><br><img src="/images/awk.png" alt="实际操作"></li>
<li>打印5行3列的内容<br><code>awk &#39;{if(NR==5) print $1}&#39; marks.txt</code></li>
<li>求出第四列的所有数据之和<br><code>awk &#39;{sum+=$4};END {print sum}&#39; marks.txt</code></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;echo-命令&quot;&gt;&lt;a href=&quot;#echo-命令&quot; class=&quot;headerlink&quot; title=&quot;echo 命令&quot;&gt;&lt;/a&gt;echo 命令&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;h4 id=&quot;echo-e-处理特殊字符&quot;&gt;&lt;a href=&quot;#echo-e-处理特殊
    
    </summary>
    
    
      <category term="Linux" scheme="http://www.520zhang.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>自动化测试中设置代理以及https的证书信任问题</title>
    <link href="http://www.520zhang.com/2017/06/28/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E4%B8%AD%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86%E4%BB%A5%E5%8F%8Ahttps%E7%9A%84%E8%AF%81%E4%B9%A6%E4%BF%A1%E4%BB%BB%E9%97%AE%E9%A2%98/"/>
    <id>http://www.520zhang.com/2017/06/28/自动化测试中设置代理以及https的证书信任问题/</id>
    <published>2017-06-28T11:47:41.000Z</published>
    <updated>2017-06-28T12:41:17.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h3><p>在我们的日常测试开发过程中，我们难免会遇到需要设置代理的情况，或者我们原来的http服务升级成https，那我们的自动化测试case就需要作出相应的调整，一下案例是我在实际工作中遇到的情况，以及解决方案，持续更新中</p>
<h3 id="HttpClient"><a href="#HttpClient" class="headerlink" title="HttpClient"></a>HttpClient</h3><p>在使用httpclient调用https接口的时候，我们可以进行如下设置<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//设置代理</span></div><div class="line">HttpHost proxy = <span class="keyword">new</span> <span class="type">HttpHost</span>(<span class="string">"100.21.23.1"</span>,<span class="number">10001</span>);</div><div class="line"><span class="comment">//设置证书信任</span></div><div class="line">CloseableHttpClient httpClient = HttpClients.custom()</div><div class="line">        .setProxy(proxy)</div><div class="line">        .setHostnameVerifier(<span class="keyword">new</span> <span class="type">AllowAllHostnameVerifier</span>())</div><div class="line">        .setSslcontext(<span class="keyword">new</span> <span class="type">SSLContextBuilder</span>().loadTrustMaterial(<span class="literal">null</span>, <span class="keyword">new</span> <span class="type">TrustStrategy</span>()</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">public</span> boolean isTrusted(X509Certificate[] arg0, <span class="keyword">String</span> arg1) throws CertificateException</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;).build()).build();</div></pre></td></tr></table></figure></p>
<h3 id="selenium"><a href="#selenium" class="headerlink" title="selenium"></a>selenium</h3><p>selenium支持的浏览器比较多，每个浏览器的设置也不尽相同，以及是我遇到的情况</p>
<h4 id="chrome"><a href="#chrome" class="headerlink" title="chrome"></a>chrome</h4><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">DesiredCapabilities browser = DesiredCapabilities.chrome();</div><div class="line">ChromeOptions options = <span class="keyword">new</span> <span class="type">ChromeOptions</span>();</div><div class="line"><span class="comment">//设置代理</span></div><div class="line"><span class="keyword">String</span> proxyStr = <span class="string">"100.21.23.1:10001"</span>;</div><div class="line">Proxy proxy = <span class="keyword">new</span> <span class="type">Proxy</span>();</div><div class="line">proxy.setHttpProxy(proxyStr).setFtpProxy(proxyStr).setSslProxy(proxyStr);</div><div class="line">browser.setCapability(ChromeOptions.PROXY, proxy);</div><div class="line"><span class="comment">//设置证书信任</span></div><div class="line">List&lt;<span class="keyword">String</span>&gt; optionsStrs = <span class="keyword">new</span> <span class="type">ArrayList</span>&lt;&gt;();</div><div class="line">optionsStrs.add(<span class="string">"--remember-cert-error-decisions=true"</span>);</div><div class="line">optionsStrs.add(<span class="string">"-trustAllSSLCertificates"</span>);</div><div class="line">options.addArguments(optionsStrs);</div><div class="line">browser.setCapability(ChromeOptions.CAPABILITY, options);</div><div class="line"></div><div class="line">ChromeDriver driver = <span class="keyword">new</span> <span class="type">ChromeDriver</span>(browser);</div></pre></td></tr></table></figure>
<h4 id="IE"><a href="#IE" class="headerlink" title="IE"></a>IE</h4><figure class="highlight pony"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//设置代理</span></div><div class="line"><span class="type">String</span> proxyStr = <span class="string">"100.21.23.1:10001"</span>;</div><div class="line"><span class="type">Proxy</span> proxy = <span class="function"><span class="keyword">new</span> <span class="title">Proxy</span>();</span></div><div class="line"><span class="title">proxy</span>.<span class="title">setHttpProxy</span>(proxyStr).<span class="title">setFtpProxy</span>(proxyStr).<span class="title">setSslProxy</span>(proxyStr);</div><div class="line"><span class="comment">//设置证书信任</span></div><div class="line"><span class="title">List</span>&lt;<span class="title">String</span>&gt; <span class="title">optionsStrs</span> = <span class="title">new</span> <span class="title">ArrayList</span>&lt;&gt;();</div><div class="line"><span class="title">optionsStrs</span>.<span class="title">add</span>("--remember-cert-error-decisions=true");</div><div class="line"><span class="title">optionsStrs</span>.<span class="title">add</span>("-ignore-certificate-errors");</div><div class="line"><span class="title">options</span>.<span class="title">addArguments</span>(optionsStrs);</div></pre></td></tr></table></figure>
<h3 id="htmlunit"><a href="#htmlunit" class="headerlink" title="htmlunit"></a>htmlunit</h3><p>htmlunit是Java里面常用的无界面浏览器，可以模拟界面操作<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//设置证书信任</span></div><div class="line">webClient wc = <span class="keyword">new</span> <span class="type">webClient</span>(BrowserVersion.CHROME);</div><div class="line">wc.getOptions().setUseInsecureSSL(<span class="literal">true</span>);</div><div class="line"><span class="comment">//设置代理</span></div><div class="line">ProxyConfig proxyConfig = <span class="keyword">new</span> <span class="type">proxyConfig</span>(<span class="string">"100.21.23.1"</span>, <span class="string">"10001"</span>);</div><div class="line">wc.getOptions().setProxyConfig(proxyConfig);</div></pre></td></tr></table></figure></p>
<h3 id="selenide"><a href="#selenide" class="headerlink" title="selenide"></a>selenide</h3><p>selenide也是一个UI测试框架，其框架是基于selenium，但是比selenium使用更加简洁，我的其他博客中有介绍其基本使用方法</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//<span class="keyword">selenide中证书信任问题可以再启动case的时候加一行命令行,多个参数之间使用`,`分隔</span></div><div class="line"><span class="keyword">mvn </span>clean -Dchromeoptions.args=-trustAllSSLCertificates</div></pre></td></tr></table></figure>
<figure class="highlight pony"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//设置代理</span></div><div class="line"><span class="type">String</span> proxyStr = <span class="string">"100.21.23.1:10001"</span>;</div><div class="line"><span class="type">Proxy</span> proxy = <span class="function"><span class="keyword">new</span> <span class="title">Proxy</span>();</span></div><div class="line"><span class="title">proxy</span>.<span class="title">setHttpProxy</span>(proxyStr).<span class="title">setFtpProxy</span>(proxyStr).<span class="title">setSslProxy</span>(proxyStr);</div><div class="line"><span class="title">WebDriverRunner</span>.<span class="title">setProxy</span>(proxy);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;简述&quot;&gt;&lt;a href=&quot;#简述&quot; class=&quot;headerlink&quot; title=&quot;简述&quot;&gt;&lt;/a&gt;简述&lt;/h3&gt;&lt;p&gt;在我们的日常测试开发过程中，我们难免会遇到需要设置代理的情况，或者我们原来的http服务升级成https，那我们的自动化测试case就需要作
    
    </summary>
    
      <category term="自动化测试" scheme="http://www.520zhang.com/categories/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="selenide" scheme="http://www.520zhang.com/tags/selenide/"/>
    
      <category term="selenium" scheme="http://www.520zhang.com/tags/selenium/"/>
    
      <category term="https" scheme="http://www.520zhang.com/tags/https/"/>
    
      <category term="httpclient" scheme="http://www.520zhang.com/tags/httpclient/"/>
    
      <category term="proxy" scheme="http://www.520zhang.com/tags/proxy/"/>
    
  </entry>
  
  <entry>
    <title>docker常用操作整理</title>
    <link href="http://www.520zhang.com/2017/06/23/docker%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E6%95%B4%E7%90%86/"/>
    <id>http://www.520zhang.com/2017/06/23/docker常用操作整理/</id>
    <published>2017-06-23T09:23:07.000Z</published>
    <updated>2017-06-23T09:55:32.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="开始一个docker化的web服务器"><a href="#开始一个docker化的web服务器" class="headerlink" title="开始一个docker化的web服务器"></a>开始一个docker化的web服务器</h3><ol>
<li><p><code>docker run -d -p 80:80 --name webserver nginx</code><br>如果docker在局部没有找到，docker将会从远处docker hub上拉取<br>在本地浏览器中，输入<code>http://localhost:80</code>就会看到一个Nginx的欢迎页面</p>
</li>
<li><p><code>docker ps</code>  查看当前正在运行的容器信息</p>
<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"> ~  docker ps</div><div class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                NAMES</div><div class="line">9f7d5c73d804        nginx               <span class="string">"nginx -g 'daemon ..."</span>   <span class="number">10</span> minutes ago      <span class="meta">Up</span> <span class="number">2</span> seconds        <span class="number">0.0</span><span class="meta">.0</span><span class="meta">.0</span>:<span class="number">80</span>-&gt;<span class="number">80</span>/tcp   webserver</div></pre></td></tr></table></figure>
</li>
<li><p>停止containers<br><code>docker stop webserver</code> 停止镜像的运行,如果你想重启输入如下命令<code>docker start webserver</code>，一个停止了的container将不会出现在<code>docker ps</code>命令中，你需要输入<code>docker ps -a</code>才能看见</p>
</li>
<li><p>删除containers或者images<br><code>docker rm -f webserver</code>这个命令将会删除container，但是不会删除Nginx的image，你可以使用命令<code>docker images</code>列出所有的镜像，你可能想保留一些镜像让你不必把他们再从Docker Hub中拉取。你可以使用<code>docker rmi</code>命令加一个镜像id，或者镜像名称来删除您不再需要的图像。<br>例如：<code>docker rmi nginx</code></p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;开始一个docker化的web服务器&quot;&gt;&lt;a href=&quot;#开始一个docker化的web服务器&quot; class=&quot;headerlink&quot; title=&quot;开始一个docker化的web服务器&quot;&gt;&lt;/a&gt;开始一个docker化的web服务器&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
    
    </summary>
    
      <category term="docker" scheme="http://www.520zhang.com/categories/docker/"/>
    
    
      <category term="运维" scheme="http://www.520zhang.com/tags/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="docker" scheme="http://www.520zhang.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>hexo常见操作记录</title>
    <link href="http://www.520zhang.com/2017/06/22/hexo%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C%E8%AE%B0%E5%BD%95/"/>
    <id>http://www.520zhang.com/2017/06/22/hexo常见操作记录/</id>
    <published>2017-06-22T14:08:53.000Z</published>
    <updated>2017-06-22T14:19:29.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="常见命令"><a href="#常见命令" class="headerlink" title="常见命令"></a>常见命令</h3><ul>
<li><p><code>hexo new &quot;博客&quot;</code></p>
<blockquote>
<p>新建一个博客页面</p>
</blockquote>
</li>
<li><p><code>hexo d -g</code></p>
<blockquote>
<p>等价于先<code>hexo generate</code> 再 <code>hexo deploy</code></p>
</blockquote>
</li>
<li><p><code>hexo server</code></p>
<blockquote>
<p>启动本地服务</p>
</blockquote>
</li>
<li><p><code>hexo clean</code></p>
<blockquote>
<p>清理缓存</p>
</blockquote>
</li>
<li><p><code>hexo new page about</code></p>
<blockquote>
<p>生成about页面</p>
</blockquote>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;常见命令&quot;&gt;&lt;a href=&quot;#常见命令&quot; class=&quot;headerlink&quot; title=&quot;常见命令&quot;&gt;&lt;/a&gt;常见命令&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;hexo new &amp;quot;博客&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
    
    </summary>
    
      <category term="工具" scheme="http://www.520zhang.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="hexo" scheme="http://www.520zhang.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>设计一套具备LRU过期策略的缓存程序</title>
    <link href="http://www.520zhang.com/2017/06/22/%E8%AE%BE%E8%AE%A1%E4%B8%80%E5%A5%97%E5%85%B7%E5%A4%87LRU%E8%BF%87%E6%9C%9F%E7%AD%96%E7%95%A5%E7%9A%84%E7%BC%93%E5%AD%98%E7%A8%8B%E5%BA%8F/"/>
    <id>http://www.520zhang.com/2017/06/22/设计一套具备LRU过期策略的缓存程序/</id>
    <published>2017-06-22T14:02:11.000Z</published>
    <updated>2017-07-27T08:52:40.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="考察点"><a href="#考察点" class="headerlink" title="考察点:"></a>考察点:</h4><ul>
<li>缓存容器的设计：LinkedHashMap的使用</li>
<li>缓存容器并发考虑</li>
</ul>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.LinkedHashMap;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by zhangyuanchen on 2017/6/22.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> class LruTest&lt;K, V&gt; &#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="built_in">int</span> cacheSize;</div><div class="line">    <span class="keyword">private</span> LinkedHashMap&lt;K, V&gt; <span class="built_in">map</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">float</span> loadFactor = <span class="number">0.75</span>f;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * @param cacheSize 缓存大小</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> LruTest(<span class="built_in">int</span> cacheSize) &#123;</div><div class="line">        <span class="keyword">this</span>.cacheSize = cacheSize;</div><div class="line">        <span class="built_in">int</span> initialCapacity = (<span class="built_in">int</span>) Math.<span class="built_in">ceil</span>(cacheSize / loadFactor) + <span class="number">1</span>;</div><div class="line">        <span class="built_in">map</span> = <span class="keyword">new</span> LinkedHashMap&lt;K, V&gt;(initialCapacity, loadFactor, <span class="keyword">true</span>) &#123;</div><div class="line">            @Override</div><div class="line">            <span class="keyword">protected</span> <span class="built_in">boolean</span> removeEldestEntry(Map.Entry&lt;K, V&gt; eldest) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="built_in">size</span>() &gt; LruTest.<span class="keyword">this</span>.cacheSize;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> put(K <span class="built_in">key</span>, V value) &#123;</div><div class="line">        <span class="built_in">map</span>.put(<span class="built_in">key</span>, value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> V <span class="built_in">get</span>(K <span class="built_in">key</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">map</span>.<span class="built_in">get</span>(<span class="built_in">key</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</div><div class="line">        LruTest&lt;Integer, <span class="keyword">String</span>&gt; lruTest = <span class="keyword">new</span> LruTest&lt;Integer, <span class="keyword">String</span>&gt;(<span class="number">3</span>);</div><div class="line">        lruTest.put(<span class="number">1</span>, <span class="string">"one"</span>);  <span class="comment">// 1</span></div><div class="line">        lruTest.put(<span class="number">2</span>, <span class="string">"two"</span>);  <span class="comment">// 2,1</span></div><div class="line">        lruTest.put(<span class="number">3</span>, <span class="string">"three"</span>); <span class="comment">// 3,2,1</span></div><div class="line">        lruTest.put(<span class="number">4</span>, <span class="string">"four"</span>); <span class="comment">// 4,3,2</span></div><div class="line">        lruTest.<span class="built_in">get</span>(<span class="number">3</span>); <span class="comment">// 3,4,2</span></div><div class="line">        lruTest.<span class="built_in">get</span>(<span class="number">2</span>); <span class="comment">// 2,3,4</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>LinkedHashMap</code>中<code>initialCapacity</code>初始容量，<code>loadFactor</code>扩容因子，<code>true</code>代表使用访问顺序，<code>false</code>代表使用插入顺序，一般情况下，不必指定排序模式，其迭代顺序即为默认为插入顺序</li>
<li>重写<code>LinkedHashMap</code>中的<code>removeEldestEntry</code>方法，该方法可以提供在每次添加新条目时移除最旧条目的实现程序，默认返回<code>false</code>，即永远不能移除最旧的元素， 重写后会移出最旧的元素</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;考察点&quot;&gt;&lt;a href=&quot;#考察点&quot; class=&quot;headerlink&quot; title=&quot;考察点:&quot;&gt;&lt;/a&gt;考察点:&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;缓存容器的设计：LinkedHashMap的使用&lt;/li&gt;
&lt;li&gt;缓存容器并发考虑&lt;/li&gt;
&lt;/ul&gt;
&lt;fig
    
    </summary>
    
      <category term="Java" scheme="http://www.520zhang.com/categories/Java/"/>
    
    
      <category term="缓存" scheme="http://www.520zhang.com/tags/%E7%BC%93%E5%AD%98/"/>
    
      <category term="集合类" scheme="http://www.520zhang.com/tags/%E9%9B%86%E5%90%88%E7%B1%BB/"/>
    
      <category term="面试题" scheme="http://www.520zhang.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>CountDownLatch、CyclicBarrier、ExecutorService的使用</title>
    <link href="http://www.520zhang.com/2017/06/11/CountDownLatch%E3%80%81ExecutorService%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.520zhang.com/2017/06/11/CountDownLatch、ExecutorService的使用/</id>
    <published>2017-06-10T18:31:50.000Z</published>
    <updated>2017-09-07T13:04:56.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>CountDownLatch代表的是当所有子线程都执行完成的时候再执行主线程，只要子线程还没有执行完成，主线程就处于一个等待状态。</li>
<li>CyclicBarrier代表的是当所有子线程到达某一个地方的时候再一起执行，就好像大家一起去爬山，约好一个集合地点，然后大家有的走的快，有的走的慢，但是需要所有人都到达了才能一起继续出发。<figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestService</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args) &#123;</div><div class="line">        CountDownLatch countDownLatch = <span class="keyword">new</span> <span class="type">CountDownLatch</span>(<span class="number">50</span>);</div><div class="line">        <span class="comment">//开启一个线程池</span></div><div class="line">        ExecutorService executor = Executors.<span class="keyword">new</span><span class="type">CachedThreadPool</span>();</div><div class="line">        <span class="comment">//执行TestThread里面的run方法</span></div><div class="line">        executor.execute(<span class="keyword">new</span> <span class="type">TestThread</span>(countDownLatch));</div><div class="line">        executor.execute(<span class="keyword">new</span> <span class="type">TestThread</span>(countDownLatch));</div><div class="line">        executor.execute(<span class="keyword">new</span> <span class="type">TestThread</span>(countDownLatch));</div><div class="line">        <span class="comment">//线程池不再接受新的任务</span></div><div class="line">        executor.shutdown();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<ol>
<li><code>executor.execute(new TestThread(countDownLatch));</code>这段传入的是一个实现<code>Runnable</code>接口的类，执行的方法则是<code>run</code>方法里面的内容，每一个<code>execute</code>则是开启一个线程</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</div><div class="line">    <span class="keyword">private</span>  CountDownLatch countDownLatch;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestThread</span><span class="params">( CountDownLatch countDownLatch )</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.countDownLatch = countDownLatch;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">while</span> (countDownLatch.getCount() &gt;<span class="number">0</span>)&#123;</div><div class="line">            countDownLatch.countDown();</div><div class="line">            System.out.println(<span class="string">"输出："</span>+Thread.currentThread()+<span class="string">"&gt;&gt;&gt;"</span>+ countDownLatch.getCount());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li><code>CountDownLatch countDownLatch = new CountDownLatch(50);</code>这段是启用一个线程辅助类，传入的参数是一个<code>int</code>类型的计数，在<code>TestThread</code>中的<code>run</code>方法中，每执行一次，通过调用<code>countDownLatch.countDown();</code>方法计数减一，当计数内容为<code>0</code>时，则子线程全部执行完成，此时主线程才能继续往下执行。</li>
</ol>
<h4 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h4><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">输出：Thread[pool<span class="number">-1</span>-thread<span class="number">-1</span>,<span class="number">5</span>,main]&gt;&gt;&gt;<span class="number">49</span></div><div class="line">输出：Thread[pool<span class="number">-1</span>-thread<span class="number">-1</span>,<span class="number">5</span>,main]&gt;&gt;&gt;<span class="number">47</span></div><div class="line">输出：Thread[pool<span class="number">-1</span>-thread<span class="number">-1</span>,<span class="number">5</span>,main]&gt;&gt;&gt;<span class="number">46</span></div><div class="line">输出：Thread[pool<span class="number">-1</span>-thread<span class="number">-1</span>,<span class="number">5</span>,main]&gt;&gt;&gt;<span class="number">45</span></div><div class="line">输出：Thread[pool<span class="number">-1</span>-thread<span class="number">-1</span>,<span class="number">5</span>,main]&gt;&gt;&gt;<span class="number">44</span></div><div class="line">输出：Thread[pool<span class="number">-1</span>-thread<span class="number">-1</span>,<span class="number">5</span>,main]&gt;&gt;&gt;<span class="number">43</span></div><div class="line">输出：Thread[pool<span class="number">-1</span>-thread<span class="number">-1</span>,<span class="number">5</span>,main]&gt;&gt;&gt;<span class="number">42</span></div><div class="line">输出：Thread[pool<span class="number">-1</span>-thread<span class="number">-1</span>,<span class="number">5</span>,main]&gt;&gt;&gt;<span class="number">41</span></div><div class="line">输出：Thread[pool<span class="number">-1</span>-thread<span class="number">-1</span>,<span class="number">5</span>,main]&gt;&gt;&gt;<span class="number">40</span></div><div class="line">输出：Thread[pool<span class="number">-1</span>-thread<span class="number">-2</span>,<span class="number">5</span>,main]&gt;&gt;&gt;<span class="number">48</span></div><div class="line">输出：Thread[pool<span class="number">-1</span>-thread<span class="number">-1</span>,<span class="number">5</span>,main]&gt;&gt;&gt;<span class="number">39</span></div><div class="line">输出：Thread[pool<span class="number">-1</span>-thread<span class="number">-2</span>,<span class="number">5</span>,main]&gt;&gt;&gt;<span class="number">38</span></div><div class="line">输出：Thread[pool<span class="number">-1</span>-thread<span class="number">-3</span>,<span class="number">5</span>,main]&gt;&gt;&gt;<span class="number">36</span></div><div class="line">输出：Thread[pool<span class="number">-1</span>-thread<span class="number">-1</span>,<span class="number">5</span>,main]&gt;&gt;&gt;<span class="number">36</span></div><div class="line">输出：Thread[pool<span class="number">-1</span>-thread<span class="number">-3</span>,<span class="number">5</span>,main]&gt;&gt;&gt;<span class="number">34</span></div><div class="line">...</div></pre></td></tr></table></figure>
<p>具体用法请google</p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;CountDownLatch代表的是当所有子线程都执行完成的时候再执行主线程，只要子线程还没有执行完成，主线程就处于一个等待状态。&lt;/li&gt;
&lt;li&gt;CyclicBarrier代表的是当所有子线程到达某一个地方的时候再一起执行，就好像大家一起去爬山，约好一个集合
    
    </summary>
    
      <category term="Java" scheme="http://www.520zhang.com/categories/Java/"/>
    
    
      <category term="多线程" scheme="http://www.520zhang.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>windows，mac 更新npm包管理器</title>
    <link href="http://www.520zhang.com/2017/06/11/windows%EF%BC%8Cmac-%E6%9B%B4%E6%96%B0npm%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8/"/>
    <id>http://www.520zhang.com/2017/06/11/windows，mac-更新npm包管理器/</id>
    <published>2017-06-10T18:29:32.000Z</published>
    <updated>2017-06-10T18:30:40.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="在-nix（OSX，Linux等）上升级"><a href="#在-nix（OSX，Linux等）上升级" class="headerlink" title="在* nix（OSX，Linux等）上升级"></a>在* nix（OSX，Linux等）上升级</h3><blockquote>
<p>您可能需要使用<code>sudo</code>前缀这些命令，尤其是在Linux或OS X上，如果您使用其默认安装程序安装了<code>Node</code>。</p>
</blockquote>
<p>您可以使用以下方式升级到最新版本的npm：<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">npm</span> install -g <span class="built_in">npm</span>@latest</div></pre></td></tr></table></figure></p>
<p>或升级到最新的LTS版本：<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">npm</span> install -g <span class="built_in">npm</span>@lts</div></pre></td></tr></table></figure></p>
<h3 id="在Windows上升级"><a href="#在Windows上升级" class="headerlink" title="在Windows上升级"></a>在Windows上升级</h3><p>你可以<a href="https://github.com/felixrieseberg/npm-windows-upgrade" target="_blank" rel="external">你可以从这里下载</a>或者跟着如下手册概述操作</p>
<p>默认情况下，<code>npm</code>和nodejs一起安装在<code>C:\Program Files (x86)\nodejs</code>。<br>npm的默认安装包（包括潜在的npm本身）分别存储在用户特定的目录中，这是目录（<code>C:\Users\&lt;username&gt;\AppData\Roaming\npm</code>），因为安装程序在<code>PATH</code>中将<code>C:\Program Files (x86)\nodejs</code>放在<code>C:\Users\&lt;username&gt;\AppData\Roaming\npm</code>之前，它将始终使用安装了<code>nodejs</code>的<code>npm</code>版本，而不是你使用<code>npm -g install npm@&lt;version&gt;</code>安装的<code>npm</code>版本，要解决这个问题，您可以执行以下操作之一</p>
<ul>
<li><p>选项1：编辑Windows环境变量的PATH路径，将<code>％appdata％\ npm</code>放在<code>％ProgramFiles％\ nodejs</code>之前。</p>
<blockquote>
<p>请记住，当您对<code>PATH</code>进行更改或如何安装<code>npm</code>时，需要重新启动<code>cmd.exe</code>（并可能重新启动Windows）。</p>
</blockquote>
</li>
<li><p>选项2：删除两者</p>
<ol>
<li><code>%ProgramFiles%\nodejs\npm</code></li>
<li><code>%ProgramFiles%\nodejs\npm.cmd</code></li>
</ol>
</li>
<li><p>选项3：导航到<code>％ProgramFiles％\ nodejs \ node_modules \ npm</code>并将<code>npmrcfile</code>复制到另一个文件夹或桌面。<br>然后打开cmd.exe并运行以下命令：</p>
<figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd %ProgramFiles%<span class="string">\nodejs</span></div><div class="line"><span class="built_in">npm</span> install <span class="built_in">npm</span>@latest</div></pre></td></tr></table></figure>
</li>
</ul>
<h6 id="如果在node-js安装程序中安装了npm，执行上述步骤之一后，执行以下操作。"><a href="#如果在node-js安装程序中安装了npm，执行上述步骤之一后，执行以下操作。" class="headerlink" title="如果在node.js安装程序中安装了npm，执行上述步骤之一后，执行以下操作。"></a>如果在<code>node.js</code>安装程序中安装了<code>npm</code>，执行上述步骤之一后，执行以下操作。</h6><ul>
<li>选项1或2<br>进入<code>％ProgramFiles％\ nodejs \ node_modules \ npm</code>，并在新的<code>npm</code>文件夹中复制名为<code>npmrc</code>的文件，该文件夹应为<code>％appdata％\ npm \ node_modules \ npm</code>。这将告诉新的<code>npm</code>全局安装的软件包。</li>
<li>选项3<br>将<code>npmrc</code>文件复制回<code>％ProgramFiles％\ nodejs \ node_modules \ npm</code><blockquote>
<p>（如果您运行的是Windows 7，并且没有％appdata％\ npm目录，请参阅下面的内容）</p>
</blockquote>
</li>
</ul>
<p>运行以下命令查看npm将安装全局包以验证其是否正确<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm<span class="built_in"> config </span><span class="builtin-name">get</span><span class="built_in"> prefix </span>-g</div></pre></td></tr></table></figure></p>
<p>如果未设置为<code>&lt;X&gt;:\Users\&lt;user&gt;\AppData\Roaming\npm</code>，则可以运行以下命令来更正它：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm<span class="built_in"> config </span><span class="builtin-name">set</span><span class="built_in"> prefix </span><span class="string">"<span class="variable">$&#123;APPDATA&#125;</span>/npm"</span> -g</div></pre></td></tr></table></figure></p>
<p>顺便提一句，如果你希望这个软件包不被安装到你的漫游配置文件中（因为你的共享网络上有一个配额，或是使域名登录或者退出一个域名），你可以把它放在你本地的应用数据中：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm<span class="built_in"> config </span><span class="builtin-name">set</span><span class="built_in"> prefix </span><span class="string">"<span class="variable">$&#123;LOCALAPPDATA&#125;</span>/npm"</span> -g</div></pre></td></tr></table></figure></p>
<p>…以及将<code>%APPDATA%\npm</code>复制到<code>%LOCALAPPDATA%\npm</code>（当然更新您的％PATH％）。</p>
<h3 id="尝试清除npm缓存"><a href="#尝试清除npm缓存" class="headerlink" title="尝试清除npm缓存"></a>尝试清除npm缓存</h3><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">npm</span> cache clean</div></pre></td></tr></table></figure>
<p>原文链接：<a href="https://github.com/npm/npm/wiki/Troubleshooting#a-brief-note-on-the-built-in-windows-configuration" target="_blank" rel="external">https://github.com/npm/npm/wiki/Troubleshooting#a-brief-note-on-the-built-in-windows-configuration</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;在-nix（OSX，Linux等）上升级&quot;&gt;&lt;a href=&quot;#在-nix（OSX，Linux等）上升级&quot; class=&quot;headerlink&quot; title=&quot;在* nix（OSX，Linux等）上升级&quot;&gt;&lt;/a&gt;在* nix（OSX，Linux等）上升级&lt;/h3
    
    </summary>
    
      <category term="nodejs" scheme="http://www.520zhang.com/categories/nodejs/"/>
    
    
      <category term="npm" scheme="http://www.520zhang.com/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>testng集成allure测试报告</title>
    <link href="http://www.520zhang.com/2017/06/11/testng%E9%9B%86%E6%88%90allure%E6%B5%8B%E8%AF%95%E6%8A%A5%E5%91%8A/"/>
    <id>http://www.520zhang.com/2017/06/11/testng集成allure测试报告/</id>
    <published>2017-06-10T18:19:19.000Z</published>
    <updated>2017-06-23T09:03:09.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong> <code>pom.xml</code>文件里面的配置 </strong></p>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ru.yandex.qatools.allure<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>allure-examples-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">selenide.version</span>&gt;</span>4.4.1<span class="tag">&lt;/<span class="name">selenide.version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">testng</span>&gt;</span>fvt<span class="tag">&lt;/<span class="name">testng</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">aspectj.version</span>&gt;</span>1.8.9<span class="tag">&lt;/<span class="name">aspectj.version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">allure.version</span>&gt;</span>1.5.2<span class="tag">&lt;/<span class="name">allure.version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- testng--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.testng<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>testng<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.9.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- selenide--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.codeborne<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>selenide<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$<span class="template-variable">&#123;selenide.version&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></div><div class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- Allure --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ru.yandex.qatools.allure<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>allure-testng-adaptor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$<span class="template-variable">&#123;allure.version&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- allure--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.18.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">testFailureIgnore</span>&gt;</span>true<span class="tag">&lt;/<span class="name">testFailureIgnore</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">suiteXmlFiles</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">suiteXmlFile</span>&gt;</span>$<span class="template-variable">&#123;testng&#125;</span><span class="xml">.xml<span class="tag">&lt;/<span class="name">suiteXmlFile</span>&gt;</span></span></div><div class="line">                <span class="tag">&lt;/<span class="name">suiteXmlFiles</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">argLine</span>&gt;</span></div><div class="line">                    -javaagent:"$<span class="template-variable">&#123;settings.localRepository&#125;</span><span class="xml">/org/aspectj/aspectjweaver/$</span><span class="template-variable">&#123;aspectj.version&#125;</span><span class="xml">/aspectjweaver-$</span><span class="template-variable">&#123;aspectj.version&#125;</span><span class="xml">.jar"</span></div><div class="line">                <span class="tag">&lt;/<span class="name">argLine</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">systemProperties</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">name</span>&gt;</span>allure.results.directory<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">value</span>&gt;</span>$<span class="template-variable">&#123;project.build.directory&#125;</span><span class="xml">/allure-results<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span></div><div class="line">                    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">systemProperties</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$<span class="template-variable">&#123;aspectj.version&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></div><div class="line">                <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!--Needed only to show reports locally. Run jetty:run and</span></div><div class="line">        open localhost:8080 to show the report--&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.eclipse.jetty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jetty-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>9.2.10.v20150310<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">webAppSourceDirectory</span>&gt;</span>$<span class="template-variable">&#123;project.build.directory&#125;</span><span class="xml">/site/allure-maven-plugin<span class="tag">&lt;/<span class="name">webAppSourceDirectory</span>&gt;</span></span></div><div class="line">                <span class="tag">&lt;<span class="name">stopKey</span>&gt;</span>stop<span class="tag">&lt;/<span class="name">stopKey</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">stopPort</span>&gt;</span>1234<span class="tag">&lt;/<span class="name">stopPort</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">reporting</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">excludeDefaults</span>&gt;</span>true<span class="tag">&lt;/<span class="name">excludeDefaults</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ru.yandex.qatools.allure<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>allure-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">reporting</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>上传错误case的截图?</strong><br>实现一个监听器<br>创建一个类<code>AllureReporterListener</code>实现<code>IHookable</code>接口<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AllureReporterListener</span> <span class="keyword">implements</span> <span class="title">IHookable</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">(IHookCallBack callBack, ITestResult testResult)</span> </span>&#123;</div><div class="line">        callBack.runTestMethod(testResult);</div><div class="line">        <span class="keyword">if</span> (testResult.getThrowable() != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                takeScreenShot(testResult.getMethod().getMethodName());</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125; </div><div class="line"></div><div class="line">    <span class="meta">@Attachment</span>(value = <span class="string">"Failure in method &#123;0&#125;"</span>, type = <span class="string">"image/png"</span>) </div><div class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] takeScreenShot(String methodName) <span class="keyword">throws</span> Exception&#123;</div><div class="line">        File screenshot = Screenshots.getLastScreenshot();</div><div class="line">        <span class="function"><span class="keyword">return</span> Files.<span class="title">toByteArray</span><span class="params">(screenshot)</span></span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>如何使用该监听器？</strong><br>两种方法：</p>
<ol>
<li><p>在testng.xml中加入一个<code>listeners</code>标签</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">suite</span> <span class="attr">name</span>=<span class="string">"TestAll"</span> <span class="attr">parallel</span>=<span class="string">"methods"</span> <span class="attr">skipfailedinvocationcounts</span>=<span class="string">"true"</span> <span class="attr">thread-count</span>=<span class="string">"1"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">listeners</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">listener</span> <span class="attr">class-name</span>=<span class="string">"com.alibaba.selenide.utils.AllureReporterListener"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">listeners</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">test</span> <span class="attr">name</span>=<span class="string">"AllTest"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">classes</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"com.alibaba.selenide.cases.IdeTest"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">classes</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">test</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">suite</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>在case中加入<code>@Listeners</code>注解</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Listeners</span></div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">IdeTest</span> <span class="keyword">extends</span> <span class="title">BaseTest</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@BeforeMethod</span></div><div class="line">    public void setup() <span class="keyword">throws</span> <span class="type">Exception</span> &#123;</div><div class="line">        preprocess();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Title</span>(<span class="string">"创建节点，运行，提交，测试运行"</span>)</div><div class="line">    <span class="meta">@Test</span></div><div class="line">    public void nodeTest() &#123;</div><div class="line">          </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p><strong> 如何运行？ </strong></p>
<blockquote>
<p>先运行： <code>mvn clean test</code> 运行case<br>再运行： <code>mvn site</code> 生成站点<br>最后运行： <code>mvn jetty:run</code> 查看报告</p>
</blockquote>
<p><strong> 可能遇到的问题？ </strong></p>
<ol>
<li>生成的报告每个case出现两个一模一样的case<br><a href="https://github.com/allure-framework/allure1/issues/731" target="_blank" rel="external">https://github.com/allure-framework/allure1/issues/731</a><br>去掉pom文件中maven-surefire-plugin中这个配置<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>listener<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">value</span>&gt;</span>ru.yandex.qatools.allure.testng.AllureTestListener<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div></pre></td></tr></table></figure></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; &lt;code&gt;pom.xml&lt;/code&gt;文件里面的配置 &lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight dust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;
    
    </summary>
    
      <category term="工具" scheme="http://www.520zhang.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Test" scheme="http://www.520zhang.com/tags/Test/"/>
    
      <category term="测试报告" scheme="http://www.520zhang.com/tags/%E6%B5%8B%E8%AF%95%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>selenium grid的使用</title>
    <link href="http://www.520zhang.com/2017/06/11/selenium-grid%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.520zhang.com/2017/06/11/selenium-grid的使用/</id>
    <published>2017-06-10T18:17:48.000Z</published>
    <updated>2017-06-10T18:22:05.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="想分布式运行case-试试下面的操作吧"><a href="#想分布式运行case-试试下面的操作吧" class="headerlink" title="想分布式运行case? 试试下面的操作吧!"></a>想分布式运行case? 试试下面的操作吧!</h2><p><strong>node机器中运行的代码</strong><br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -jar selenium-server-standalone-<span class="number">2.44</span>.<span class="number">0</span>.jar -<span class="keyword">role</span> <span class="title">node</span>  -hub http://&#123;hub服务器地址&#125;:<span class="number">4444</span>/grid/register -port <span class="number">5500</span> -maxSession <span class="number">60</span> -browser <span class="string">"browserName=chrome,version=node_3,maxInstances=20,platform=WINDOWS"</span> -Dwebdriver.chrome.<span class="attr">driver=</span><span class="string">"C:\\chromedriver.exe"</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>需要jar包<code>selenium-server-standalone-2.44.0.jar</code>， 在windows中一般将如上代码写在一个<code>.bat</code>文件中，每一个node机器中写一个<code>.bat</code>文件，运行的时候直接启动<code>.bat</code>文件</p>
</blockquote>
<p><strong>hub机器中运行的代码</strong><br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -jar selenium-server-standalone-<span class="number">2.44</span>.<span class="number">0</span>.jar -<span class="keyword">role</span> <span class="title">hub</span></div></pre></td></tr></table></figure></p>
<table>
<thead>
<tr>
<th>属性</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>-role</code></td>
<td><code>node</code> 代表的是节点  <code>hub</code>代表的是server</td>
</tr>
<tr>
<td><code>-hub</code></td>
<td>服务器<code>hub</code>地址 <code>http://loaclhost:4444</code></td>
</tr>
<tr>
<td><code>-port</code></td>
<td>当前机器启用的端口号， 默认值<code>4444</code></td>
</tr>
<tr>
<td><code>-timeout</code></td>
<td>默认值<code>300</code>，设置为<code>0</code>表示没有超时时间，hub永远不会释放node</td>
</tr>
<tr>
<td><code>-maxSession</code></td>
<td>默认值<code>5</code>个， 可以在节点上并行运行的最大浏览器数，比如说现在node支持<code>Firefox 3.6</code>,<code>Firefox 4.0</code> 和<code>Internet Explorer 8</code>，<code>-maxSession=1</code>，你永远不会有超过1个浏览器运行，如果现在<code>maxSession=1</code>，你可以运行两个<code>Firefox 3.6</code>,<code>Firefox 4.0</code> 或者一个<code>Firefox 3.6</code>和一个<code>Internet Explorer 8</code></td>
</tr>
<tr>
<td><code>-browser &lt;params&gt;</code></td>
<td><code>browserName={android, chrome, firefox, htmlunit, internet explorer, iphone, opera} version={browser version} firefox_binary={可执行二进制文件路径} chrome_binary={可执行二进制文件路径} maxInstances={此类型的浏览器最大数量} platform={WINDOWS, LINUX, MAC}</code></td>
</tr>
</tbody>
</table>
<blockquote>
<p>注意<code>-maxSession</code>和<code>maxInstances</code>的区别！</p>
</blockquote>
<ul>
<li><h3 id="使用json配置node"><a href="#使用json配置node" class="headerlink" title="使用json配置node"></a>使用json配置node</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -jar selenium-server-standalone.jar -<span class="keyword">role</span> <span class="title">node</span> -nodeConfig nodeconfig.json</div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"capabilities"</span>:</div><div class="line">  [</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"browserName"</span>: <span class="string">"firefox"</span>,</div><div class="line">      <span class="attr">"maxInstances"</span>: <span class="number">5</span>,</div><div class="line">      <span class="attr">"seleniumProtocol"</span>: <span class="string">"WebDriver"</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"browserName"</span>: <span class="string">"chrome"</span>,</div><div class="line">      <span class="attr">"maxInstances"</span>: <span class="number">5</span>,</div><div class="line">      <span class="attr">"seleniumProtocol"</span>: <span class="string">"WebDriver"</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"browserName"</span>: <span class="string">"internet explorer"</span>,</div><div class="line">      <span class="attr">"maxInstances"</span>: <span class="number">1</span>,</div><div class="line">      <span class="attr">"seleniumProtocol"</span>: <span class="string">"WebDriver"</span></div><div class="line">    &#125;</div><div class="line">  ],</div><div class="line">  <span class="attr">"proxy"</span>: <span class="string">"org.openqa.grid.selenium.proxy.DefaultRemoteProxy"</span>,</div><div class="line">  <span class="attr">"maxSession"</span>: <span class="number">5</span>,</div><div class="line">  <span class="attr">"port"</span>: <span class="number">5555</span>,</div><div class="line">  <span class="attr">"register"</span>: <span class="literal">true</span>,</div><div class="line">  <span class="attr">"registerCycle"</span>: <span class="number">5000</span>,</div><div class="line">  <span class="attr">"hub"</span>: <span class="string">"http://localhost:4444"</span>,</div><div class="line">  <span class="attr">"nodeStatusCheckTimeout"</span>: <span class="number">5000</span>,</div><div class="line">  <span class="attr">"nodePolling"</span>: <span class="number">5000</span>,</div><div class="line">  <span class="attr">"role"</span>: <span class="string">"node"</span>,</div><div class="line">  <span class="attr">"unregisterIfStillDownAfter"</span>: <span class="number">60000</span>,</div><div class="line">  <span class="attr">"downPollingLimit"</span>: <span class="number">2</span>,</div><div class="line">  <span class="attr">"debug"</span>: <span class="literal">false</span>,</div><div class="line">  <span class="attr">"servlets"</span> : [],</div><div class="line">  <span class="attr">"withoutServlets"</span>: [],</div><div class="line">  <span class="attr">"custom"</span>: &#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><h3 id="使用json配置hub"><a href="#使用json配置hub" class="headerlink" title="使用json配置hub"></a>使用json配置hub</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -jar selenium-server-standalone.jar -<span class="keyword">role</span> <span class="title">hub</span> -hubConfig hubconfig.json</div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"port"</span>: <span class="number">4444</span>,</div><div class="line">  <span class="attr">"newSessionWaitTimeout"</span>: <span class="number">-1</span>,</div><div class="line">  <span class="attr">"servlets"</span> : [],</div><div class="line">  <span class="attr">"withoutServlets"</span>: [],</div><div class="line">  <span class="attr">"custom"</span>: &#123;&#125;,</div><div class="line">  <span class="attr">"capabilityMatcher"</span>: <span class="string">"org.openqa.grid.internal.utils.DefaultCapabilityMatcher"</span>,</div><div class="line">  <span class="attr">"throwOnCapabilityNotPresent"</span>: <span class="literal">true</span>,</div><div class="line">  <span class="attr">"cleanUpCycle"</span>: <span class="number">5000</span>,</div><div class="line">  <span class="attr">"role"</span>: <span class="string">"hub"</span>,</div><div class="line">  <span class="attr">"debug"</span>: <span class="literal">false</span>,</div><div class="line">  <span class="attr">"browserTimeout"</span>: <span class="number">0</span>,</div><div class="line">  <span class="attr">"timeout"</span>: <span class="number">1800</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>你可以打开<code>http://127.0.0.1:4444/grid/console</code>查看Hub管理页面</p>
</blockquote>
<h3 id="如何使用？"><a href="#如何使用？" class="headerlink" title="如何使用？"></a>如何使用？</h3><ol>
<li><p>在selenide中 </p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Configuration<span class="selector-class">.remote</span> = http:<span class="comment">//127.0.0.1:4444/wd/hub</span></div></pre></td></tr></table></figure>
</li>
<li><p>在selenium中</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">DesiredCapabilities chromeDC</span> = DesiredCapabilities.chrome();</div><div class="line"><span class="attribute">WebDriver retDriver</span> = new RemoteWebDriver(new URL(<span class="string">"http://127.0.0.1:4444/wd/hub"</span>), chromeDC );</div></pre></td></tr></table></figure></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;想分布式运行case-试试下面的操作吧&quot;&gt;&lt;a href=&quot;#想分布式运行case-试试下面的操作吧&quot; class=&quot;headerlink&quot; title=&quot;想分布式运行case? 试试下面的操作吧!&quot;&gt;&lt;/a&gt;想分布式运行case? 试试下面的操作吧!&lt;/h2&gt;&lt;
    
    </summary>
    
      <category term="自动化测试" scheme="http://www.520zhang.com/categories/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="selenium" scheme="http://www.520zhang.com/tags/selenium/"/>
    
  </entry>
  
  <entry>
    <title>locust的使用</title>
    <link href="http://www.520zhang.com/2017/06/11/locust%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.520zhang.com/2017/06/11/locust的使用/</id>
    <published>2017-06-10T18:13:47.000Z</published>
    <updated>2017-06-10T18:16:11.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Locust是什么？"><a href="#Locust是什么？" class="headerlink" title="Locust是什么？"></a>Locust是什么？</h3><p>Locust 是一个开源负载测试工具。使用 Python 代码定义用户行为，也可以仿真百万个用户。<br>Locust 是非常简单易用，分布式，用户负载测试工具。Locust 主要为网站或者其他系统进行负载测试，能测试出一个系统可以并发处理多少用户。<br>Locust 是完全基于时间的，因此单个机器支持几千个并发用户。相比其他许多事件驱动的应用，Locust 不使用回调，而是使用轻量级的处理方式 <a href="http://www.oschina.net/p/gevent" target="_blank" rel="external">gevent</a>。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip  <span class="keyword">install</span>  locustio</div></pre></td></tr></table></figure>
<p>如果你打算通过多进程或多机，分布式地运行<code>Locust</code>，我们建议你也安装<code>pyzmq</code>：<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip <span class="keyword">install</span> pyzmq</div></pre></td></tr></table></figure></p>
<h3 id="TaskSet类"><a href="#TaskSet类" class="headerlink" title="TaskSet类"></a>TaskSet类</h3><p>每个<code>Locust</code>类必须有一个指向一个<code>TaskSet</code>的<code>task_set</code>属性。<br><code>TaskSet</code>是任务的集合，这些任务是普通的python可调用对象。<br>当负载测试启动的时候，产生的每一个<code>Locust</code>类的实例都会开始执行它们的<code>TaskSet</code>。接下来发生的是，每个<code>TaskSet</code>会选择它的任务中的一个，并且调用它。接下来等待<code>min_wait</code>到<code>max_wait</code>毫秒，然后它会再选择下一个要被调用的任务，再等待，等等。</p>
<h6 id="声明任务"><a href="#声明任务" class="headerlink" title="声明任务"></a>声明任务</h6><p>为TaskSet声明任务最典型的方式是使用<code>task</code>装饰器。<br>下面是一个例子：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(l)</span>:</span></div><div class="line">    l.client.get(<span class="string">"/"</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">stats</span><span class="params">(l)</span>:</span></div><div class="line">    l.client.get(<span class="string">"/stats/requests"</span>)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserTasks</span><span class="params">(TaskSet)</span>:</span></div><div class="line">    <span class="comment"># one can specify tasks like this</span></div><div class="line">    tasks = [index, stats]</div><div class="line">    </div><div class="line">    <span class="comment"># but it might be convenient to use the @task decorator</span></div><div class="line"><span class="meta">    @task(3)</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">task1</span><span class="params">(self)</span>:</span></div><div class="line">        self.client.get(<span class="string">"/does_not_exist"</span>)</div><div class="line"></div><div class="line"><span class="meta">    @task(6)</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">task2</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebsiteUser</span><span class="params">(HttpLocust)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    Locust user class that does requests to the locust web server running on localhost</div><div class="line">    """</div><div class="line">    host = <span class="string">"http://127.0.0.1:8089"</span></div><div class="line">    min_wait = <span class="number">2000</span></div><div class="line">    max_wait = <span class="number">5000</span></div><div class="line">    task_set = UserTasks</div></pre></td></tr></table></figure></p>
<ul>
<li><code>@task</code>装饰器带一个可选的<code>weight</code>参数，它用于指定任务的执行比例。在下面的例子中，<strong><code>task2</code>的执行次数是<code>task1</code>的两倍</strong>：</li>
<li><p><code>TaskSet</code>支持嵌套</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTaskSet</span><span class="params">(TaskSet)</span>:</span>  </div><div class="line"><span class="meta">    @task</span></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">SubTaskSet</span><span class="params">(TaskSet)</span>:</span></div><div class="line"><span class="meta">        @task</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">my_task</span><span class="params">(self)</span>:</span></div><div class="line">            <span class="keyword">pass</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>on_start</code>函数<br>TaskSet类可以定义一个on_start方法，当模拟用户开始执行TaskSet类的时候，on_start方法会被调用。</p>
</li>
</ul>
<h3 id="HttpLocust类"><a href="#HttpLocust类" class="headerlink" title="HttpLocust类"></a>HttpLocust类</h3><p>本文已经包含了Locust用户的任务调度部分，为了真正的给一个系统进行负载测试，我们需要生成HTTP请求，HttpLocust类的存在，就是为了解决这个问题。当使用HttpLocust类的时候，每个实例都有一个client属性—它是能够用于生成HTTP请求的HttpSession类的实例<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">from locust import HttpLocust, TaskSet, task</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTaskSet</span>(<span class="title">TaskSet</span>):  </span></div><div class="line">    @task(<span class="number">2</span>)</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(<span class="keyword">self</span>)</span></span>:</div><div class="line">        <span class="keyword">self</span>.client.get(<span class="string">"/"</span>)</div><div class="line"></div><div class="line">    @task(<span class="number">1</span>)</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">about</span><span class="params">(<span class="keyword">self</span>)</span></span>:</div><div class="line">        <span class="keyword">self</span>.client.get(<span class="string">"/about/"</span>)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyLocust</span>(<span class="title">HttpLocust</span>):  </span></div><div class="line">    task_set = MyTaskSet</div><div class="line">    min_wait = <span class="number">5000</span></div><div class="line">    max_wait = <span class="number">15000</span></div></pre></td></tr></table></figure></p>
<blockquote>
<ol>
<li>使用上面的<code>Locust</code>类，每个模拟用户在请求之间都会等待<code>5-15</code>秒，并且/的请求次数是<code>/about/</code>的两倍。 </li>
<li>用心的读者可能会觉得很奇怪：在TaskSet内部我们使用<code>self.client</code>而非<code>self.locust.client</code>开引用<code>HttpSession</code>实例，我们能这么做是因为：<code>TaskSet</code>类有一个便捷的被称作client的属性，它简单的返回<code>self.locust.client</code>。</li>
</ol>
</blockquote>
<ul>
<li><h6 id="生成GET请求的例子"><a href="#生成GET请求的例子" class="headerlink" title="生成GET请求的例子"></a>生成<code>GET</code>请求的例子</h6><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">response = self.client.<span class="builtin-name">get</span>(<span class="string">"/about"</span>)  </div><div class="line"><span class="builtin-name">print</span> <span class="string">"Response status code:"</span>, response.status_code  </div><div class="line"><span class="builtin-name">print</span> <span class="string">"Response content:"</span>, response.content</div></pre></td></tr></table></figure>
</li>
<li><h6 id="生成POST请求的例子"><a href="#生成POST请求的例子" class="headerlink" title="生成POST请求的例子"></a>生成<code>POST</code>请求的例子</h6><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">response = self<span class="selector-class">.client</span><span class="selector-class">.post</span>(<span class="string">"/login"</span>, &#123;<span class="string">"username"</span>:<span class="string">"testuser"</span>, <span class="string">"password"</span>:<span class="string">"secret"</span>&#125;)</div></pre></td></tr></table></figure>
</li>
<li><h6 id="人工控制一个请求被视为成功还是失败"><a href="#人工控制一个请求被视为成功还是失败" class="headerlink" title="人工控制一个请求被视为成功还是失败"></a>人工控制一个请求被视为成功还是失败</h6><p>默认情况下，除非HTTP响应码是ok(2xx)，否则请求就会被标记为失败。大多数情况下，默认的情况就是我们想要的。然而有时:<code>比如说你期望返回404，或者是测试一个即使发生错误，仍然返回200 OK的系统，就存在人工控制locust将请求视为成功还是失败的需求。 
通过使用catch_response参数和with语句，可以把一个响应码是okay的请求标记成失败</code></p>
<figure class="highlight vbscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">with</span> client.<span class="keyword">get</span>(<span class="string">"/"</span>, catch_response=<span class="literal">True</span>) as <span class="built_in">response</span>:  </div><div class="line">    <span class="keyword">if</span> <span class="built_in">response</span>.content != <span class="string">"Success"</span>:</div><div class="line">        <span class="built_in">response</span>.failure(<span class="string">"Got wrong response"</span>)</div></pre></td></tr></table></figure>
</li>
</ul>
<p>正如可以把响应码为OK的请求标记为失败，也可以使用catch_response参数和with语句，将返回http错误代码的请求在统计中报告为成功。<br><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">with</span> client.<span class="keyword">get</span>(<span class="string">"/does_not_exist/"</span>, catch_response=<span class="literal">True</span>) as <span class="built_in">response</span>:  </div><div class="line">    <span class="keyword">if</span> <span class="built_in">response</span>.status_code == <span class="number">404</span>:</div><div class="line">        <span class="built_in">response</span>.success()</div></pre></td></tr></table></figure></p>
<ul>
<li><h6 id="安全模式"><a href="#安全模式" class="headerlink" title="安全模式"></a>安全模式</h6><p>HTTP客户端被配置成以安全模式运行，任何由于连接错误，超时之类导致失败的请求都不会抛出异常，而是返回一个空的虚拟的Response对象，在Locust的统计中请求会被报告为一个失败。被返回的虚拟的Response对象的content属性被设置为None，status_code属性被设置为0</p>
</li>
<li><h6 id="将到具有动态参数的URL的请求分组"><a href="#将到具有动态参数的URL的请求分组" class="headerlink" title="将到具有动态参数的URL的请求分组"></a>将到具有动态参数的URL的请求分组</h6><p>对于网站来说，拥有URL中包含某种动态参数的页面是非常普遍的。通常在Locust的统计中，把这些URL分成一组是有意义的。可以通过给HttpSession实例的请求方法传递name参数，来完成这件事。<br>例子：</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Statistics for these requests will be grouped under: /blog/?id=[id]</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(10):  </div><div class="line">    client.<span class="builtin-name">get</span>(<span class="string">"/blog?id=%i"</span> % i, <span class="attribute">name</span>=<span class="string">"/blog?id=[id]"</span>)</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><ul>
<li><p>如果运行的文件名称为<code>locustfile.py</code>  则可以直接运行</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">locust --host=<span class="string">http:</span><span class="comment">//example.com</span></div></pre></td></tr></table></figure>
</li>
<li><p>如果locust file被放到了其他的地方，我们可以运行</p>
<figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">locust -f 当前文件夹路径<span class="string">/my_file.py</span> <span class="params">--host=http</span>:<span class="string">//example.com</span></div></pre></td></tr></table></figure>
</li>
<li><p>如果需要多线程分布式运行locust，启动的时候需要指定<code>master</code>和<code>slave</code></p>
<figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">locust -f 当前文件夹路径<span class="string">/my_file.py</span> <span class="params">--host=http</span>:<span class="string">//example.com</span>  <span class="params">--master</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>然后我们可以启动任意数量的slave进程：<code>(用master机器的ip替换192.168.0.14)</code><br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">locust -f my_locustfile.py --slave --master-host=<span class="number">192.168</span><span class="number">.0</span><span class="number">.14</span></div></pre></td></tr></table></figure></p>
<p>分布式运行Locust</p>
<h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><table>
<thead>
<tr>
<th>属性</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>-f</code></td>
<td>文件名</td>
</tr>
<tr>
<td><code>--host</code></td>
<td>运行的接口的host</td>
</tr>
<tr>
<td><code>--master</code></td>
<td>以master的模式运行locust，web接口会运行在这个节点上</td>
</tr>
<tr>
<td><code>--slave</code></td>
<td>以slave模式运行locust。</td>
</tr>
<tr>
<td><code>--master-host=X.X.X.X</code></td>
<td>和<code>--slave</code>一起使用，用来设置master节点的ip或主机名（默认是127.0.0.1）</td>
</tr>
<tr>
<td><code>--master-port=5557</code></td>
<td>和<code>--slave</code>一起使用，用来设置master节点的端口号（默认是5557），<strong>注意</strong>：<code>locust既会使用指定的端口号，又会使用指定的端口号+1，因此如果设置为5557，那么locust既会使用5557，也会使用5558</code></td>
</tr>
<tr>
<td><code>--master-bind-host=X.X.X.X</code></td>
<td>和<code>--master</code>一起使用，决定master节点绑定到哪一个网络接口，<code>默认是*（所有可用的网络接口）</code></td>
</tr>
</tbody>
</table>
<h3 id="min-wait和max-wait属性"><a href="#min-wait和max-wait属性" class="headerlink" title="min_wait和max_wait属性"></a>min_wait和max_wait属性</h3><p>除了<code>task_set</code>属性，也可以声明<code>min_wait</code>和<code>max_wait</code>属性，它们是一个模拟用户在执行任务之间等待的<code>最大和最小时间，单位是毫秒</code>。<code>min_wait和max_wait默认是1000</code>，因此如果没有声明<code>min_wait</code>和<code>max_wait</code>，<code>locust</code>在执行每个任务之间总是会等待<code>1</code>秒。<br>使用下面的locustfile，在任务之间每个用户等待<code>5-15</code>秒：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> locust <span class="keyword">import</span> Locust, TaskSet, task</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTaskSet</span><span class="params">(TaskSet)</span>:</span>  </div><div class="line"><span class="meta">    @task</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">my_task</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"executing my_task"</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyLocust</span><span class="params">(Locust)</span>:</span>  </div><div class="line">    task_set = MyTaskSet</div><div class="line">    min_wait = <span class="number">5000</span></div><div class="line">    max_wait = <span class="number">15000</span></div></pre></td></tr></table></figure></p>
<p>参考：<br> <a href="http://timd.cn/2015/09/17/locust/" target="_blank" rel="external">http://timd.cn/2015/09/17/locust/</a><br><a href="https://my.oschina.net/u/2306127/blog/482625" target="_blank" rel="external">https://my.oschina.net/u/2306127/blog/482625</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Locust是什么？&quot;&gt;&lt;a href=&quot;#Locust是什么？&quot; class=&quot;headerlink&quot; title=&quot;Locust是什么？&quot;&gt;&lt;/a&gt;Locust是什么？&lt;/h3&gt;&lt;p&gt;Locust 是一个开源负载测试工具。使用 Python 代码定义用户行为，
    
    </summary>
    
      <category term="性能测试" scheme="http://www.520zhang.com/categories/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="Test" scheme="http://www.520zhang.com/tags/Test/"/>
    
      <category term="locust" scheme="http://www.520zhang.com/tags/locust/"/>
    
  </entry>
  
  <entry>
    <title>jenkins笔记</title>
    <link href="http://www.520zhang.com/2017/06/11/jenkins%E7%AC%94%E8%AE%B0/"/>
    <id>http://www.520zhang.com/2017/06/11/jenkins笔记/</id>
    <published>2017-06-10T17:43:07.000Z</published>
    <updated>2017-06-10T17:54:31.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="启动Jenkins"><a href="#启动Jenkins" class="headerlink" title="启动Jenkins"></a>启动Jenkins</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">java </span>-<span class="keyword">jar </span><span class="keyword">jenkins.war </span> --httpPort=<span class="number">8001</span></div></pre></td></tr></table></figure>
<h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><ul>
<li>查看jenkins的HTML文件，然后样式，或者引用的字体加载不出来<blockquote>
<p>Refused to load the font ‘<a href="http://localhost:8080/job/nec-server-test/extent-report/extentreports/css/fonts/Roboto-Thin.woff" target="_blank" rel="external">http://localhost:8080/job/nec-server-test/extent-report/extentreports/css/fonts/Roboto-Thin.woff</a>‘ because it violates the following Content Security Policy directive: “default-src ‘none’”. Note that ‘font-src’ was not explicitly set, so ‘default-src’ is used as a fallback.</p>
</blockquote>
</li>
</ul>
<p>出现这种问题的情况是jenkins默认使用严格的加载模式，不允许外部的一些js操作导致的，需要将一些规则放宽<br>参考：<a href="https://wiki.jenkins-ci.org/display/JENKINS/Configuring+Content+Security+Policy" target="_blank" rel="external">https://wiki.jenkins-ci.org/display/JENKINS/Configuring+Content+Security+Policy</a></p>
<blockquote>
<p>解决办法：在启动jenkins的时候<br>  使用<br><code>java -Dhudson.model.DirectoryBrowserSupport.CSP= -jar jenkins.war</code><br>代替<br><code>java -jar jenkins.war</code></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;启动Jenkins&quot;&gt;&lt;a href=&quot;#启动Jenkins&quot; class=&quot;headerlink&quot; title=&quot;启动Jenkins&quot;&gt;&lt;/a&gt;启动Jenkins&lt;/h3&gt;&lt;figure class=&quot;highlight mipsasm&quot;&gt;&lt;table&gt;&lt;tr&gt;
    
    </summary>
    
      <category term="运维" scheme="http://www.520zhang.com/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="jenkins" scheme="http://www.520zhang.com/tags/jenkins/"/>
    
  </entry>
  
  <entry>
    <title>git常见操作及设置</title>
    <link href="http://www.520zhang.com/2017/06/11/git%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C%E5%8F%8A%E8%AE%BE%E7%BD%AE/"/>
    <id>http://www.520zhang.com/2017/06/11/git常见操作及设置/</id>
    <published>2017-06-10T17:12:12.000Z</published>
    <updated>2017-06-10T18:09:08.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="push设置无需每次输入密码"><a href="#push设置无需每次输入密码" class="headerlink" title="push设置无需每次输入密码"></a>push设置无需每次输入密码</h3><h4 id="http连接方式"><a href="#http连接方式" class="headerlink" title="http连接方式"></a>http连接方式</h4><ul>
<li>方法一<br><code>git config --global credential.helper wincred</code></li>
</ul>
<ul>
<li>方法二<br><code>http://[username]:[password]@zychen.com.cn/scm/nec/nec-server.git</code><blockquote>
<p>username: 远程代码块的登录账号<br>password：远程代码块的登录密码<br>@后面的内容及为远程代码块</p>
</blockquote>
</li>
</ul>
<h4 id="ssh连接方式"><a href="#ssh连接方式" class="headerlink" title="ssh连接方式"></a>ssh连接方式</h4><p><a href="https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/#platform-mac" target="_blank" rel="external">传送门</a></p>
<h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 配置用户信息</span></div><div class="line">git<span class="built_in"> config </span>--global user.name stash &lt;用户名&gt;</div><div class="line">git<span class="built_in"> config </span>--global user.email &lt;公司邮箱&gt; </div><div class="line"></div><div class="line"><span class="comment"># 关闭自动crlf转换，开启crlf检查</span></div><div class="line">git<span class="built_in"> config </span>--global core.autocrlf <span class="literal">false</span></div><div class="line">git<span class="built_in"> config </span>--global core.safecrlf <span class="literal">true</span></div><div class="line"></div><div class="line"><span class="comment"># 给命令设置别名</span></div><div class="line">git<span class="built_in"> config </span>--global alias.st status</div></pre></td></tr></table></figure>
<h3 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h3><ul>
<li><p>删除远程仓库的分支</p>
<figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">push</span> <span class="built_in">origin</span> :远程分支名</div></pre></td></tr></table></figure>
</li>
<li><p>修剪远程中已经删除的分支，但在本地还存在的</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">git remote prune origin</span></div></pre></td></tr></table></figure>
</li>
<li><p>回退本地commit的历史</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="keyword">reset</span> <span class="keyword">HEAD</span>^^</div></pre></td></tr></table></figure>
</li>
<li><p>将别的分支的commit的历史复制到当前分支</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">git</span> cherry pick -提交的commit号</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;push设置无需每次输入密码&quot;&gt;&lt;a href=&quot;#push设置无需每次输入密码&quot; class=&quot;headerlink&quot; title=&quot;push设置无需每次输入密码&quot;&gt;&lt;/a&gt;push设置无需每次输入密码&lt;/h3&gt;&lt;h4 id=&quot;http连接方式&quot;&gt;&lt;a href
    
    </summary>
    
      <category term="工具" scheme="http://www.520zhang.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="git" scheme="http://www.520zhang.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>selenide的入门教程</title>
    <link href="http://www.520zhang.com/2017/06/10/selenide%E7%9A%84%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
    <id>http://www.520zhang.com/2017/06/10/selenide的入门教程/</id>
    <published>2017-06-10T02:23:09.000Z</published>
    <updated>2017-06-10T18:10:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><p>在pom.xml中加入如下依赖<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.codeborne<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>selenide<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="常用配置"><a href="#常用配置" class="headerlink" title="常用配置"></a>常用配置</h3><ul>
<li><p>selenide默认使用Firefox浏览器，如何切换成chrome浏览器？</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">System.setProperty(<span class="string">"webdriver.chrome.driver"</span>, driverPath);</div><div class="line">Configuration.<span class="attribute">browser</span>=<span class="string">"chrome"</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>selenide如何设置代理？</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Proxy<span class="built_in"> proxy </span>= new Proxy();</div><div class="line">proxy.setHttpProxy(<span class="string">"127.0.0.1:8080"</span>);</div><div class="line">WebDriverRunner.setProxy(proxy);</div></pre></td></tr></table></figure>
</li>
<li><p>selenide如何修改报告默认生成路径？</p>
<figure class="highlight vhdl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Configuration</span>.reportsFolder = <span class="string">"target/reports/test"</span>+<span class="keyword">Configuration</span>.browser;</div></pre></td></tr></table></figure>
</li>
<li><p>selenide如何下载非<code>&lt;a&gt;</code>标签的文件？</p>
<figure class="highlight protobuf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//默认值是FileDownloadMode.HTTPGET，此值只用作用于&lt;a&gt;标签</span></div><div class="line">Configuration.fileDownload = FileDownloadMode.PROXY;</div></pre></td></tr></table></figure>
</li>
<li><p>如何保持浏览器运行完不关闭？</p>
<figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="string">//</span>默认值是<span class="literal">false</span></div><div class="line">Configuration.holdBrowserOpen = <span class="literal">true</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>如何使用自己实例化的<code>driver</code>？</p>
<figure class="highlight abnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">WebDriverRunner.setWebDriver(driver)<span class="comment">;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>此处需要注意，如果使用自己设置的<code>driver</code>，<code>selenide</code>不会自动关闭<code>brower</code>,需要我们<strong>手动关闭</strong>！ </p>
</blockquote>
<h3 id="常见操作"><a href="#常见操作" class="headerlink" title="常见操作"></a>常见操作</h3><ul>
<li><p>打开一个url：</p>
<figure class="highlight abnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">open(<span class="string">"https://www.baidu.com/"</span>)<span class="comment">;</span></div></pre></td></tr></table></figure>
</li>
<li><p>鼠标点击：</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//默认使用css selector的方式来查找元素</span></div><div class="line">Selenide.$(element).<span class="built_in">click</span>();</div><div class="line">Selenide.$(By.xpath(element)).<span class="built_in">click</span>();</div></pre></td></tr></table></figure>
</li>
<li><p>文本框赋值：<br><code>Selenide.$(By.xpath(element)).doubleClick();</code></p>
</li>
<li>鼠标事件：<br><code>Selenide.$(By.xpath(element)).contextClick();</code></li>
<li>鼠标右键事件：<br><code>Selenide.$(By.xpath(element)).setValue(value);</code></li>
<li>判断元素是否存在：<br><code>Selenide.$(By.xpath(element)).exists();</code></li>
<li>下载文件的操作：<br><code>Selenide.$(By.xpath(element)).download();</code><blockquote>
<p>默认只能下载<code>&lt;a&gt;</code>标签的元素<br>若想下载其他标签里面的元素则需另外设置</p>
</blockquote>
</li>
<li>上传文件的操作：<br><code>Selenide.$(By.xpath(element)).uploadFile(file);</code><blockquote>
<p>uploadFile的参数为File类型</p>
</blockquote>
</li>
<li>查询元素的文本内容<br><code>Selenide.$(By.xpath(element)).text();</code> </li>
<li>等待直到存在某个元素<br><code>Selenide.$(By.xpath(element)).waitUntil(exist , timeoutSeconds*1000);</code></li>
<li>等待直到元素在页面可见<br><code>Selenide.$(By.xpath(element)).waitUntil(visible , timeoutSeconds*1000);</code></li>
<li>等待直到满足两个条件中的任意一个,就相当于<code>if(a || b){}</code>这种写法，第一个参数是备注<br><code>Selenide.$(By.xpath(element)).waitUntil(or(&quot;有一个相等&quot;, text(param1), text(param2)) , timeoutSeconds*1000);</code></li>
<li>等待直到某个元素不存在<br><code>Selenide.$(By.xpath(element)).waitUntil(hidden, timeoutSeconds*1000);</code></li>
<li>等待直到匹配到文本内容<br><code>Selenide.$(By.xpath(element)).waitUntil(matchesText(text),timeoutSeconds*1000)</code><blockquote>
<p>此处matchesText里面可以匹配正则表达式</p>
</blockquote>
</li>
<li>不存在某个元素<br><code>Selenide.$(By.xpath(element)).shouldNot(exist);</code></li>
<li>移动鼠标到某个元素上<br><code>Selenide.$(By.xpath(element)).hover()</code></li>
<li>获取当前页面title<br><code>Selenide.title()</code></li>
<li>获取当前页面url<br><code>WebDriverRunner.url()</code></li>
<li>切换到另一个页面<br><code>Selenide.switchTo().window(nameOrHandle)</code></li>
<li>获取当前driver<br><code>WebDriverRunner.getWebDriver();</code></li>
<li>清除浏览器cookie<br><code>Selenide.clearBrowserCookies();</code></li>
<li>刷新当前页面<br><code>Selenide.refresh();</code></li>
<li>出现alert时候出来情况<figure class="highlight abnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Selenide.confirm()<span class="comment">;</span></div><div class="line">Selenide.dismiss()<span class="comment">;</span></div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;p&gt;在pom.xml中加入如下依赖&lt;br&gt;&lt;figure class=&quot;
    
    </summary>
    
      <category term="自动化测试" scheme="http://www.520zhang.com/categories/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="Test" scheme="http://www.520zhang.com/tags/Test/"/>
    
      <category term="selenide" scheme="http://www.520zhang.com/tags/selenide/"/>
    
  </entry>
  
  <entry>
    <title>jacoco统计远程服务器代码覆盖率</title>
    <link href="http://www.520zhang.com/2017/06/09/jacoco%E7%BB%9F%E8%AE%A1%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BB%A3%E7%A0%81%E8%A6%86%E7%9B%96%E7%8E%87/"/>
    <id>http://www.520zhang.com/2017/06/09/jacoco统计远程服务器代码覆盖率/</id>
    <published>2017-06-09T15:15:17.000Z</published>
    <updated>2017-06-10T18:09:51.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="场景需求"><a href="#场景需求" class="headerlink" title="场景需求"></a>场景需求</h3><p>由于项目的需要，当前我们开发的服务端代码和接口以及集成测试代码不是写在同一个项目下，当测接口时，我们发送一个http request请求到Linux服务端，然后服务端返回一个response，这样的情况如何做代码覆盖率统计？</p>
<h3 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h3><ol>
<li>安装ant，并且设置环境变量</li>
<li>下载jacoco的jar包      <a href="http://www.eclemma.org/jacoco/" target="_blank" rel="external">点击下载</a></li>
</ol>
<h4 id="服务端设置（Linux）"><a href="#服务端设置（Linux）" class="headerlink" title="服务端设置（Linux）"></a>服务端设置（Linux）</h4><p>现在的springboot应用非常多，其本身自带tomcat，网上很多都是说修改tomcat的Catalina.sh文件来使用javaagent：<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">JAVA_OPTS</span>=<span class="string">"-javaagent:[yourPath/]jacocoagent.jar=includes=com.didispace.*,output=tcpserver,port=8044,address=30.11.227.26 -Xverify:none"</span></div></pre></td></tr></table></figure></p>
<p>针对springboot应用使用如下方式运行：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -<span class="string">javaagent:</span><span class="string">D:</span><span class="regexp">/tools/</span>jacoco<span class="number">-0.7</span><span class="number">.9</span><span class="regexp">/lib/</span>jacocoagent.jar=includes=com.didispace.*,output=tcpserver,port=<span class="number">8044</span>,address=<span class="number">30.11</span><span class="number">.227</span><span class="number">.26</span> -jar Chapter1<span class="number">-1.0</span><span class="number">.0</span>.jar</div></pre></td></tr></table></figure></p>
<blockquote>
<p>output有4个值，分别是file,tcpserver,tcpclient,mbean，默认是file。使用file的方式只有在停掉应用服务的时候才能产生覆盖率文件，而使用tcpserver的方式可以在不停止应用服务的情况下下载覆盖率文件</p>
</blockquote>
<h4 id="客户端设置（Windows）"><a href="#客户端设置（Windows）" class="headerlink" title="客户端设置（Windows）"></a>客户端设置（Windows）</h4><p>在客户端运行ant dump之前，这时可以对服务端进行接口以及功能测试，这时所有的调服务端接口操作都会记录代码覆盖率。</p>
<h5 id="结合Jenkins生成report"><a href="#结合Jenkins生成report" class="headerlink" title="结合Jenkins生成report"></a>结合Jenkins生成report</h5><p>在目录<code>D:\test-resourse\</code>下新建一个文件夹<code>trap</code>，<code>trap</code>文件夹下新建一个<code>build.xml</code>文件，文件内容如下：<br><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> <span class="meta">?&gt;</span></span></span></div><div class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">name</span>=<span class="string">"Jacoco"</span> <span class="attr">xmlns:jacoco</span>=<span class="string">"antlib:org.jacoco.ant"</span> <span class="attr">default</span>=<span class="string">"jacoco"</span>&gt;</span>   </div><div class="line">  //此处的value里面的路径，对应上面下载的jar文件路径</div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jacocoantPath"</span> <span class="attr">value</span>=<span class="string">"D:/tools/jacoco-0.7.9/lib/jacocoant.jar"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"integrationJacocoexecPath"</span> <span class="attr">value</span>=<span class="string">"./jacoco-integration.exec"</span>/&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">taskdef</span> <span class="attr">uri</span>=<span class="string">"antlib:org.jacoco.ant"</span> <span class="attr">resource</span>=<span class="string">"org/jacoco/ant/antlib.xml"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">classpath</span> <span class="attr">path</span>=<span class="string">"$</span></span><span class="template-variable">&#123;jacocoantPath&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> /&gt;</span></span></div><div class="line">  <span class="tag">&lt;/<span class="name">taskdef</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">target</span> <span class="attr">name</span>=<span class="string">"dump"</span>&gt;</span></div><div class="line">//此处的address地址即为程序/tomcat所在的linux机器地址，host与上文命令行host对应</div><div class="line">      <span class="tag">&lt;<span class="name">jacoco:dump</span> <span class="attr">address</span>=<span class="string">"30.11.227.26"</span> <span class="attr">port</span>=<span class="string">"8044"</span> <span class="attr">reset</span>=<span class="string">"true"</span> <span class="attr">destfile</span>=<span class="string">"$</span></span><span class="template-variable">&#123;integrationJacocoexecPath&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">append</span>=<span class="string">"false"</span>/&gt;</span></span></div><div class="line">  <span class="tag">&lt;/<span class="name">target</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>接着在<code>build.xml</code>文件目录下运行<code>ant dump</code>命令就会在当前目录下出现一个<code>.exec</code>后缀名结尾的文件，出现如下图所示的代表运行成功</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2590031-e94e240dd0a10ab0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<h5 id="本地生成report"><a href="#本地生成report" class="headerlink" title="本地生成report"></a>本地生成report</h5><p>在<code>trap</code>文件夹下新建一个<code>localReport</code>文件夹，<code>localReport</code>文件夹下新建一个<code>build.xml</code>文件<br><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> <span class="meta">?&gt;</span></span></span></div><div class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">name</span>=<span class="string">"jacoco"</span> <span class="attr">xmlns:jacoco</span>=<span class="string">"antlib:org.jacoco.ant"</span> <span class="attr">default</span>=<span class="string">"jacoco"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--Jacoco的安装路径--&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jacocoantPath"</span> <span class="attr">value</span>=<span class="string">"[yourPath/]jacocoant.jar"</span>/&gt;</span></div><div class="line">  <span class="comment">&lt;!--最终生成.exec文件的路径，Jacoco就是根据这个文件生成最终的报告的--&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jacocoexecPath"</span> <span class="attr">value</span>=<span class="string">"[yourPath/]jacoco.exec"</span>/&gt;</span></div><div class="line">    <span class="comment">&lt;!--生成覆盖率报告的路径--&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"reportfolderPath"</span> <span class="attr">value</span>=<span class="string">"[storageReportPath]"</span>/&gt;</span></div><div class="line">  <span class="comment">&lt;!--远程Tomcat服务的ip地址--&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"server_ip"</span> <span class="attr">value</span>=<span class="string">"100.44.44.144"</span>/&gt;</span></div><div class="line">  <span class="comment">&lt;!--前面配置的远程Tomcat服务打开的端口，要跟上面配置的一样--&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"server_port"</span> <span class="attr">value</span>=<span class="string">"8044"</span>/&gt;</span></div><div class="line">  <span class="comment">&lt;!--本地源代码路径--&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"checkOrderSrcpath"</span> <span class="attr">value</span>=<span class="string">"[Srcpath]"</span> /&gt;</span></div><div class="line">  <span class="comment">&lt;!--本地.class文件路径--&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"checkOrderClasspath"</span> <span class="attr">value</span>=<span class="string">"[classPath]"</span> /&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!--让ant知道去哪儿找Jacoco--&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">taskdef</span> <span class="attr">uri</span>=<span class="string">"antlib:org.jacoco.ant"</span> <span class="attr">resource</span>=<span class="string">"org/jacoco/ant/antlib.xml"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">classpath</span> <span class="attr">path</span>=<span class="string">"$</span></span><span class="template-variable">&#123;jacocoantPath&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> /&gt;</span></span></div><div class="line">  <span class="tag">&lt;/<span class="name">taskdef</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!--dump任务:</span></div><div class="line">      根据前面配置的ip地址，和端口号，</div><div class="line">      访问目标Tomcat服务，并生成.exec文件。--&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">target</span> <span class="attr">name</span>=<span class="string">"dump"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">jacoco:dump</span> <span class="attr">address</span>=<span class="string">"$</span></span><span class="template-variable">&#123;server_ip&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">reset</span>=<span class="string">"false"</span> <span class="attr">destfile</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;jacocoexecPath&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">port</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;server_port&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">append</span>=<span class="string">"true"</span>/&gt;</span></span></div><div class="line">  <span class="tag">&lt;/<span class="name">target</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!--jacoco任务:</span></div><div class="line">      根据前面配置的源代码路径和.class文件路径，</div><div class="line">      根据dump后，生成的.exec文件，生成最终的html覆盖率报告。--&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">target</span> <span class="attr">name</span>=<span class="string">"report"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">delete</span> <span class="attr">dir</span>=<span class="string">"$</span></span><span class="template-variable">&#123;reportfolderPath&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> /&gt;</span></span></div><div class="line">      <span class="tag">&lt;<span class="name">mkdir</span> <span class="attr">dir</span>=<span class="string">"$</span></span><span class="template-variable">&#123;reportfolderPath&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> /&gt;</span></span></div><div class="line"></div><div class="line">      <span class="tag">&lt;<span class="name">jacoco:report</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">executiondata</span>&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">file</span> <span class="attr">file</span>=<span class="string">"$</span></span><span class="template-variable">&#123;jacocoexecPath&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> /&gt;</span></span></div><div class="line">          <span class="tag">&lt;/<span class="name">executiondata</span>&gt;</span></div><div class="line"></div><div class="line">          <span class="tag">&lt;<span class="name">structure</span> <span class="attr">name</span>=<span class="string">"JaCoCo Report"</span>&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">group</span> <span class="attr">name</span>=<span class="string">"Check Order related"</span>&gt;</span>           </div><div class="line">                  <span class="tag">&lt;<span class="name">classfiles</span>&gt;</span></div><div class="line">                      <span class="tag">&lt;<span class="name">fileset</span> <span class="attr">dir</span>=<span class="string">"$</span></span><span class="template-variable">&#123;checkOrderClasspath&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> /&gt;</span></span></div><div class="line">                  <span class="tag">&lt;/<span class="name">classfiles</span>&gt;</span></div><div class="line">                  <span class="tag">&lt;<span class="name">sourcefiles</span> <span class="attr">encoding</span>=<span class="string">"gbk"</span>&gt;</span></div><div class="line">                      <span class="tag">&lt;<span class="name">fileset</span> <span class="attr">dir</span>=<span class="string">"$</span></span><span class="template-variable">&#123;checkOrderSrcpath&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> /&gt;</span></span></div><div class="line">                  <span class="tag">&lt;/<span class="name">sourcefiles</span>&gt;</span></div><div class="line">              <span class="tag">&lt;/<span class="name">group</span>&gt;</span></div><div class="line">          <span class="tag">&lt;/<span class="name">structure</span>&gt;</span></div><div class="line"></div><div class="line">          <span class="tag">&lt;<span class="name">html</span> <span class="attr">destdir</span>=<span class="string">"$</span></span><span class="template-variable">&#123;reportfolderPath&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">encoding</span>=<span class="string">"utf-8"</span> /&gt;</span>         </span></div><div class="line">      <span class="tag">&lt;/<span class="name">jacoco:report</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">target</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>在刚才新建的<code>build.xml</code>目录下运行如下命令<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//先执行</span></div><div class="line"><span class="keyword">ant</span> <span class="keyword">dump</span></div><div class="line"><span class="comment">//再执行</span></div><div class="line"><span class="keyword">ant</span> report</div></pre></td></tr></table></figure></p>
<p>这时会在<code>build.xml</code>配置文件<code>reportfolderPath</code>属性配置的路径下生成几个文件，其中有一个<code>index.html</code>文件，将其打开就是覆盖率报告</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;场景需求&quot;&gt;&lt;a href=&quot;#场景需求&quot; class=&quot;headerlink&quot; title=&quot;场景需求&quot;&gt;&lt;/a&gt;场景需求&lt;/h3&gt;&lt;p&gt;由于项目的需要，当前我们开发的服务端代码和接口以及集成测试代码不是写在同一个项目下，当测接口时，我们发送一个http req
    
    </summary>
    
      <category term="自动化测试" scheme="http://www.520zhang.com/categories/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="Test" scheme="http://www.520zhang.com/tags/Test/"/>
    
      <category term="jacoco" scheme="http://www.520zhang.com/tags/jacoco/"/>
    
  </entry>
  
</feed>
