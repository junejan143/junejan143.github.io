<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>幻影</title>
  <subtitle>苟利国家生死以 岂因祸福避趋之</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.520zhang.com/"/>
  <updated>2017-06-09T15:57:35.000Z</updated>
  <id>http://www.520zhang.com/</id>
  
  <author>
    <name>zychen.zyc</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>jacoco统计远程服务器代码覆盖率</title>
    <link href="http://www.520zhang.com/2017/06/09/jacoco%E7%BB%9F%E8%AE%A1%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BB%A3%E7%A0%81%E8%A6%86%E7%9B%96%E7%8E%87/"/>
    <id>http://www.520zhang.com/2017/06/09/jacoco统计远程服务器代码覆盖率/</id>
    <published>2017-06-09T15:15:17.000Z</published>
    <updated>2017-06-09T15:57:35.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="场景需求"><a href="#场景需求" class="headerlink" title="场景需求"></a>场景需求</h3><p>由于项目的需要，当前我们开发的服务端代码和接口以及集成测试代码不是写在同一个项目下，当测接口时，我们发送一个http request请求到Linux服务端，然后服务端返回一个response，这样的情况如何做代码覆盖率统计？</p>
<h3 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h3><ol>
<li>安装ant，并且设置环境变量</li>
<li>下载jacoco的jar包      <a href="http://www.eclemma.org/jacoco/" target="_blank" rel="external">点击下载</a></li>
</ol>
<h4 id="服务端设置（Linux）"><a href="#服务端设置（Linux）" class="headerlink" title="服务端设置（Linux）"></a>服务端设置（Linux）</h4><p>现在的springboot应用非常多，其本身自带tomcat，网上很多都是说修改tomcat的Catalina.sh文件来使用javaagent：<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">JAVA_OPTS</span>=<span class="string">"-javaagent:[yourPath/]jacocoagent.jar=includes=com.didispace.*,output=tcpserver,port=8044,address=30.11.227.26 -Xverify:none"</span></div></pre></td></tr></table></figure></p>
<p>针对springboot应用使用如下方式运行：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -<span class="string">javaagent:</span><span class="string">D:</span><span class="regexp">/tools/</span>jacoco<span class="number">-0.7</span><span class="number">.9</span><span class="regexp">/lib/</span>jacocoagent.jar=includes=com.didispace.*,output=tcpserver,port=<span class="number">8044</span>,address=<span class="number">30.11</span><span class="number">.227</span><span class="number">.26</span> -jar Chapter1<span class="number">-1.0</span><span class="number">.0</span>.jar</div></pre></td></tr></table></figure></p>
<blockquote>
<p>output有4个值，分别是file,tcpserver,tcpclient,mbean，默认是file。使用file的方式只有在停掉应用服务的时候才能产生覆盖率文件，而使用tcpserver的方式可以在不停止应用服务的情况下下载覆盖率文件</p>
</blockquote>
<h4 id="客户端设置（Windows）"><a href="#客户端设置（Windows）" class="headerlink" title="客户端设置（Windows）"></a>客户端设置（Windows）</h4><p>在客户端运行ant dump之前，这时可以对服务端进行接口以及功能测试，这时所有的调服务端接口操作都会记录代码覆盖率。</p>
<h5 id="结合Jenkins生成report"><a href="#结合Jenkins生成report" class="headerlink" title="结合Jenkins生成report"></a>结合Jenkins生成report</h5><p>在目录<code>D:\test-resourse\</code>下新建一个文件夹<code>trap</code>，<code>trap</code>文件夹下新建一个<code>build.xml</code>文件，文件内容如下：<br><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> <span class="meta">?&gt;</span></span></span></div><div class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">name</span>=<span class="string">"Jacoco"</span> <span class="attr">xmlns:jacoco</span>=<span class="string">"antlib:org.jacoco.ant"</span> <span class="attr">default</span>=<span class="string">"jacoco"</span>&gt;</span>   </div><div class="line">  //此处的value里面的路径，对应上面下载的jar文件路径</div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jacocoantPath"</span> <span class="attr">value</span>=<span class="string">"D:/tools/jacoco-0.7.9/lib/jacocoant.jar"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"integrationJacocoexecPath"</span> <span class="attr">value</span>=<span class="string">"./jacoco-integration.exec"</span>/&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">taskdef</span> <span class="attr">uri</span>=<span class="string">"antlib:org.jacoco.ant"</span> <span class="attr">resource</span>=<span class="string">"org/jacoco/ant/antlib.xml"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">classpath</span> <span class="attr">path</span>=<span class="string">"$</span></span><span class="template-variable">&#123;jacocoantPath&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> /&gt;</span></span></div><div class="line">  <span class="tag">&lt;/<span class="name">taskdef</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">target</span> <span class="attr">name</span>=<span class="string">"dump"</span>&gt;</span></div><div class="line">//此处的address地址即为程序/tomcat所在的linux机器地址，host与上文命令行host对应</div><div class="line">      <span class="tag">&lt;<span class="name">jacoco:dump</span> <span class="attr">address</span>=<span class="string">"30.11.227.26"</span> <span class="attr">port</span>=<span class="string">"8044"</span> <span class="attr">reset</span>=<span class="string">"true"</span> <span class="attr">destfile</span>=<span class="string">"$</span></span><span class="template-variable">&#123;integrationJacocoexecPath&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">append</span>=<span class="string">"false"</span>/&gt;</span></span></div><div class="line">  <span class="tag">&lt;/<span class="name">target</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>接着在<code>build.xml</code>文件目录下运行<code>ant dump</code>命令就会在当前目录下出现一个<code>.exec</code>后缀名结尾的文件，出现如下图所示的代表运行成功</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2590031-e94e240dd0a10ab0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<h5 id="本地生成report"><a href="#本地生成report" class="headerlink" title="本地生成report"></a>本地生成report</h5><p>在<code>trap</code>文件夹下新建一个<code>localReport</code>文件夹，<code>localReport</code>文件夹下新建一个<code>build.xml</code>文件<br><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> <span class="meta">?&gt;</span></span></span></div><div class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">name</span>=<span class="string">"jacoco"</span> <span class="attr">xmlns:jacoco</span>=<span class="string">"antlib:org.jacoco.ant"</span> <span class="attr">default</span>=<span class="string">"jacoco"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--Jacoco的安装路径--&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jacocoantPath"</span> <span class="attr">value</span>=<span class="string">"[yourPath/]jacocoant.jar"</span>/&gt;</span></div><div class="line">  <span class="comment">&lt;!--最终生成.exec文件的路径，Jacoco就是根据这个文件生成最终的报告的--&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jacocoexecPath"</span> <span class="attr">value</span>=<span class="string">"[yourPath/]jacoco.exec"</span>/&gt;</span></div><div class="line">    <span class="comment">&lt;!--生成覆盖率报告的路径--&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"reportfolderPath"</span> <span class="attr">value</span>=<span class="string">"[storageReportPath]"</span>/&gt;</span></div><div class="line">  <span class="comment">&lt;!--远程Tomcat服务的ip地址--&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"server_ip"</span> <span class="attr">value</span>=<span class="string">"100.44.44.144"</span>/&gt;</span></div><div class="line">  <span class="comment">&lt;!--前面配置的远程Tomcat服务打开的端口，要跟上面配置的一样--&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"server_port"</span> <span class="attr">value</span>=<span class="string">"8044"</span>/&gt;</span></div><div class="line">  <span class="comment">&lt;!--本地源代码路径--&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"checkOrderSrcpath"</span> <span class="attr">value</span>=<span class="string">"[Srcpath]"</span> /&gt;</span></div><div class="line">  <span class="comment">&lt;!--本地.class文件路径--&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"checkOrderClasspath"</span> <span class="attr">value</span>=<span class="string">"[classPath]"</span> /&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!--让ant知道去哪儿找Jacoco--&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">taskdef</span> <span class="attr">uri</span>=<span class="string">"antlib:org.jacoco.ant"</span> <span class="attr">resource</span>=<span class="string">"org/jacoco/ant/antlib.xml"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">classpath</span> <span class="attr">path</span>=<span class="string">"$</span></span><span class="template-variable">&#123;jacocoantPath&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> /&gt;</span></span></div><div class="line">  <span class="tag">&lt;/<span class="name">taskdef</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!--dump任务:</span></div><div class="line">      根据前面配置的ip地址，和端口号，</div><div class="line">      访问目标Tomcat服务，并生成.exec文件。--&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">target</span> <span class="attr">name</span>=<span class="string">"dump"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">jacoco:dump</span> <span class="attr">address</span>=<span class="string">"$</span></span><span class="template-variable">&#123;server_ip&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">reset</span>=<span class="string">"false"</span> <span class="attr">destfile</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;jacocoexecPath&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">port</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;server_port&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">append</span>=<span class="string">"true"</span>/&gt;</span></span></div><div class="line">  <span class="tag">&lt;/<span class="name">target</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!--jacoco任务:</span></div><div class="line">      根据前面配置的源代码路径和.class文件路径，</div><div class="line">      根据dump后，生成的.exec文件，生成最终的html覆盖率报告。--&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">target</span> <span class="attr">name</span>=<span class="string">"report"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">delete</span> <span class="attr">dir</span>=<span class="string">"$</span></span><span class="template-variable">&#123;reportfolderPath&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> /&gt;</span></span></div><div class="line">      <span class="tag">&lt;<span class="name">mkdir</span> <span class="attr">dir</span>=<span class="string">"$</span></span><span class="template-variable">&#123;reportfolderPath&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> /&gt;</span></span></div><div class="line"></div><div class="line">      <span class="tag">&lt;<span class="name">jacoco:report</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">executiondata</span>&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">file</span> <span class="attr">file</span>=<span class="string">"$</span></span><span class="template-variable">&#123;jacocoexecPath&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> /&gt;</span></span></div><div class="line">          <span class="tag">&lt;/<span class="name">executiondata</span>&gt;</span></div><div class="line"></div><div class="line">          <span class="tag">&lt;<span class="name">structure</span> <span class="attr">name</span>=<span class="string">"JaCoCo Report"</span>&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">group</span> <span class="attr">name</span>=<span class="string">"Check Order related"</span>&gt;</span>           </div><div class="line">                  <span class="tag">&lt;<span class="name">classfiles</span>&gt;</span></div><div class="line">                      <span class="tag">&lt;<span class="name">fileset</span> <span class="attr">dir</span>=<span class="string">"$</span></span><span class="template-variable">&#123;checkOrderClasspath&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> /&gt;</span></span></div><div class="line">                  <span class="tag">&lt;/<span class="name">classfiles</span>&gt;</span></div><div class="line">                  <span class="tag">&lt;<span class="name">sourcefiles</span> <span class="attr">encoding</span>=<span class="string">"gbk"</span>&gt;</span></div><div class="line">                      <span class="tag">&lt;<span class="name">fileset</span> <span class="attr">dir</span>=<span class="string">"$</span></span><span class="template-variable">&#123;checkOrderSrcpath&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> /&gt;</span></span></div><div class="line">                  <span class="tag">&lt;/<span class="name">sourcefiles</span>&gt;</span></div><div class="line">              <span class="tag">&lt;/<span class="name">group</span>&gt;</span></div><div class="line">          <span class="tag">&lt;/<span class="name">structure</span>&gt;</span></div><div class="line"></div><div class="line">          <span class="tag">&lt;<span class="name">html</span> <span class="attr">destdir</span>=<span class="string">"$</span></span><span class="template-variable">&#123;reportfolderPath&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">encoding</span>=<span class="string">"utf-8"</span> /&gt;</span>         </span></div><div class="line">      <span class="tag">&lt;/<span class="name">jacoco:report</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">target</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>在刚才新建的<code>build.xml</code>目录下运行如下命令<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//先执行</span></div><div class="line"><span class="keyword">ant</span> <span class="keyword">dump</span></div><div class="line"><span class="comment">//再执行</span></div><div class="line"><span class="keyword">ant</span> report</div></pre></td></tr></table></figure></p>
<p>这时会在<code>build.xml</code>配置文件<code>reportfolderPath</code>属性配置的路径下生成几个文件，其中有一个<code>index.html</code>文件，将其打开就是覆盖率报告</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;场景需求&quot;&gt;&lt;a href=&quot;#场景需求&quot; class=&quot;headerlink&quot; title=&quot;场景需求&quot;&gt;&lt;/a&gt;场景需求&lt;/h3&gt;&lt;p&gt;由于项目的需要，当前我们开发的服务端代码和接口以及集成测试代码不是写在同一个项目下，当测接口时，我们发送一个http req
    
    </summary>
    
      <category term="自动化测试" scheme="http://www.520zhang.com/categories/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="工具" scheme="http://www.520zhang.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="Test" scheme="http://www.520zhang.com/tags/Test/"/>
    
  </entry>
  
  <entry>
    <title>selenide的入门教程</title>
    <link href="http://www.520zhang.com/2017/06/08/selenide%E7%9A%84%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
    <id>http://www.520zhang.com/2017/06/08/selenide的入门教程/</id>
    <published>2017-06-08T13:45:27.000Z</published>
    <updated>2017-06-09T15:17:10.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><p>在pom.xml中加入如下依赖<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.codeborne<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>selenide<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="常用配置"><a href="#常用配置" class="headerlink" title="常用配置"></a>常用配置</h3><ul>
<li><p>selenide默认使用Firefox浏览器，如何切换成chrome浏览器？</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">System.setProperty(<span class="string">"webdriver.chrome.driver"</span>, driverPath);</div><div class="line">Configuration.<span class="attribute">browser</span>=<span class="string">"chrome"</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>selenide如何设置代理？</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Proxy<span class="built_in"> proxy </span>= new Proxy();</div><div class="line">proxy.setHttpProxy(<span class="string">"127.0.0.1:8080"</span>);</div><div class="line">WebDriverRunner.setProxy(proxy);</div></pre></td></tr></table></figure>
</li>
<li><p>selenide如何修改报告默认生成路径？</p>
<figure class="highlight vhdl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Configuration</span>.reportsFolder = <span class="string">"target/reports/test"</span>+<span class="keyword">Configuration</span>.browser;</div></pre></td></tr></table></figure>
</li>
<li><p>selenide如何下载非<code>&lt;a&gt;</code>标签的文件？</p>
<figure class="highlight protobuf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//默认值是FileDownloadMode.HTTPGET，此值只用作用于&lt;a&gt;标签</span></div><div class="line">Configuration.fileDownload = FileDownloadMode.PROXY;</div></pre></td></tr></table></figure>
</li>
<li><p>如何保持浏览器运行完不关闭？</p>
<figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="string">//</span>默认值是<span class="literal">false</span></div><div class="line">Configuration.holdBrowserOpen = <span class="literal">true</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>如何使用自己实例化的<code>driver</code>？</p>
<figure class="highlight abnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">WebDriverRunner.setWebDriver(driver)<span class="comment">;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>此处需要注意，如果使用自己设置的<code>driver</code>，<code>selenide</code>不会自动关闭<code>brower</code>,需要我们<strong>手动关闭</strong>！ </p>
</blockquote>
<h3 id="常见操作"><a href="#常见操作" class="headerlink" title="常见操作"></a>常见操作</h3><ul>
<li><p>打开一个url：</p>
<figure class="highlight abnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">open(<span class="string">"https://www.baidu.com/"</span>)<span class="comment">;</span></div></pre></td></tr></table></figure>
</li>
<li><p>鼠标点击：</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//默认使用css selector的方式来查找元素</span></div><div class="line">Selenide.$(element).<span class="built_in">click</span>();</div><div class="line">Selenide.$(By.xpath(element)).<span class="built_in">click</span>();</div></pre></td></tr></table></figure>
</li>
<li><p>文本框赋值：<br><code>Selenide.$(By.xpath(element)).doubleClick();</code></p>
</li>
<li>鼠标事件：<br><code>Selenide.$(By.xpath(element)).contextClick();</code></li>
<li>鼠标右键事件：<br><code>Selenide.$(By.xpath(element)).setValue(value);</code></li>
<li>判断元素是否存在：<br><code>Selenide.$(By.xpath(element)).exists();</code></li>
<li>下载文件的操作：<br><code>Selenide.$(By.xpath(element)).download();</code><blockquote>
<p>默认只能下载<code>&lt;a&gt;</code>标签的元素<br>若想下载其他标签里面的元素则需另外设置</p>
</blockquote>
</li>
<li>上传文件的操作：<br><code>Selenide.$(By.xpath(element)).uploadFile(file);</code><blockquote>
<p>uploadFile的参数为File类型</p>
</blockquote>
</li>
<li>查询元素的文本内容<br><code>Selenide.$(By.xpath(element)).text();</code> </li>
<li>等待直到存在某个元素<br><code>Selenide.$(By.xpath(element)).waitUntil(exist , timeoutSeconds*1000);</code></li>
<li>等待直到元素在页面可见<br><code>Selenide.$(By.xpath(element)).waitUntil(visible , timeoutSeconds*1000);</code></li>
<li>等待直到满足两个条件中的任意一个,就相当于<code>if(a || b){}</code>这种写法，第一个参数是备注<br><code>Selenide.$(By.xpath(element)).waitUntil(or(&quot;有一个相等&quot;, text(param1), text(param2)) , timeoutSeconds*1000);</code></li>
<li>等待直到某个元素不存在<br><code>Selenide.$(By.xpath(element)).waitUntil(hidden, timeoutSeconds*1000);</code></li>
<li>等待直到匹配到文本内容<br><code>Selenide.$(By.xpath(element)).waitUntil(matchesText(text),timeoutSeconds*1000)</code><blockquote>
<p>此处matchesText里面可以匹配正则表达式</p>
</blockquote>
</li>
<li>不存在某个元素<br><code>Selenide.$(By.xpath(element)).shouldNot(exist);</code></li>
<li>移动鼠标到某个元素上<br><code>Selenide.$(By.xpath(element)).hover()</code></li>
<li>获取当前页面title<br><code>Selenide.title()</code></li>
<li>获取当前页面url<br><code>WebDriverRunner.url()</code></li>
<li>切换到另一个页面<br><code>Selenide.switchTo().window(nameOrHandle)</code></li>
<li>获取当前driver<br><code>WebDriverRunner.getWebDriver();</code></li>
<li>清除浏览器cookie<br><code>Selenide.clearBrowserCookies();</code></li>
<li>刷新当前页面<br><code>Selenide.refresh();</code></li>
<li>出现alert时候出来情况<figure class="highlight abnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Selenide.confirm()<span class="comment">;</span></div><div class="line">Selenide.dismiss()<span class="comment">;</span></div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;p&gt;在pom.xml中加入如下依赖&lt;br&gt;&lt;figure class=&quot;
    
    </summary>
    
      <category term="自动化测试" scheme="http://www.520zhang.com/categories/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="selenide" scheme="http://www.520zhang.com/tags/selenide/"/>
    
      <category term="框架" scheme="http://www.520zhang.com/tags/%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
</feed>
